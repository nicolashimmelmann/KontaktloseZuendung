
KontaktloseZuendung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c64  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c0  080050c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050c8  080050c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080050d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000000c  080050dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080050dc  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a1f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002835  00000000  00000000  00030a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00033290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  000340a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000238b0  00000000  00000000  00034d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cdfa  00000000  00000000  00058620  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5016  00000000  00000000  0006541a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a430  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f4  00000000  00000000  0013a4ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004e10 	.word	0x08004e10

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004e10 	.word	0x08004e10

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000342:	f1a4 0401 	sub.w	r4, r4, #1
 8000346:	d1e9      	bne.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_d2uiz>:
 800057c:	004a      	lsls	r2, r1, #1
 800057e:	d211      	bcs.n	80005a4 <__aeabi_d2uiz+0x28>
 8000580:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000584:	d211      	bcs.n	80005aa <__aeabi_d2uiz+0x2e>
 8000586:	d50d      	bpl.n	80005a4 <__aeabi_d2uiz+0x28>
 8000588:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800058c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000590:	d40e      	bmi.n	80005b0 <__aeabi_d2uiz+0x34>
 8000592:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800059e:	fa23 f002 	lsr.w	r0, r3, r2
 80005a2:	4770      	bx	lr
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	4770      	bx	lr
 80005aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005ae:	d102      	bne.n	80005b6 <__aeabi_d2uiz+0x3a>
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005b4:	4770      	bx	lr
 80005b6:	f04f 0000 	mov.w	r0, #0
 80005ba:	4770      	bx	lr

080005bc <__aeabi_uldivmod>:
 80005bc:	b953      	cbnz	r3, 80005d4 <__aeabi_uldivmod+0x18>
 80005be:	b94a      	cbnz	r2, 80005d4 <__aeabi_uldivmod+0x18>
 80005c0:	2900      	cmp	r1, #0
 80005c2:	bf08      	it	eq
 80005c4:	2800      	cmpeq	r0, #0
 80005c6:	bf1c      	itt	ne
 80005c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005d0:	f000 b972 	b.w	80008b8 <__aeabi_idiv0>
 80005d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005dc:	f000 f806 	bl	80005ec <__udivmoddi4>
 80005e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005e8:	b004      	add	sp, #16
 80005ea:	4770      	bx	lr

080005ec <__udivmoddi4>:
 80005ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f0:	9e08      	ldr	r6, [sp, #32]
 80005f2:	4604      	mov	r4, r0
 80005f4:	4688      	mov	r8, r1
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d14b      	bne.n	8000692 <__udivmoddi4+0xa6>
 80005fa:	428a      	cmp	r2, r1
 80005fc:	4615      	mov	r5, r2
 80005fe:	d967      	bls.n	80006d0 <__udivmoddi4+0xe4>
 8000600:	fab2 f282 	clz	r2, r2
 8000604:	b14a      	cbz	r2, 800061a <__udivmoddi4+0x2e>
 8000606:	f1c2 0720 	rsb	r7, r2, #32
 800060a:	fa01 f302 	lsl.w	r3, r1, r2
 800060e:	fa20 f707 	lsr.w	r7, r0, r7
 8000612:	4095      	lsls	r5, r2
 8000614:	ea47 0803 	orr.w	r8, r7, r3
 8000618:	4094      	lsls	r4, r2
 800061a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800061e:	0c23      	lsrs	r3, r4, #16
 8000620:	fbb8 f7fe 	udiv	r7, r8, lr
 8000624:	fa1f fc85 	uxth.w	ip, r5
 8000628:	fb0e 8817 	mls	r8, lr, r7, r8
 800062c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000630:	fb07 f10c 	mul.w	r1, r7, ip
 8000634:	4299      	cmp	r1, r3
 8000636:	d909      	bls.n	800064c <__udivmoddi4+0x60>
 8000638:	18eb      	adds	r3, r5, r3
 800063a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800063e:	f080 811b 	bcs.w	8000878 <__udivmoddi4+0x28c>
 8000642:	4299      	cmp	r1, r3
 8000644:	f240 8118 	bls.w	8000878 <__udivmoddi4+0x28c>
 8000648:	3f02      	subs	r7, #2
 800064a:	442b      	add	r3, r5
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f0fe 	udiv	r0, r3, lr
 8000654:	fb0e 3310 	mls	r3, lr, r0, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000660:	45a4      	cmp	ip, r4
 8000662:	d909      	bls.n	8000678 <__udivmoddi4+0x8c>
 8000664:	192c      	adds	r4, r5, r4
 8000666:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800066a:	f080 8107 	bcs.w	800087c <__udivmoddi4+0x290>
 800066e:	45a4      	cmp	ip, r4
 8000670:	f240 8104 	bls.w	800087c <__udivmoddi4+0x290>
 8000674:	3802      	subs	r0, #2
 8000676:	442c      	add	r4, r5
 8000678:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800067c:	eba4 040c 	sub.w	r4, r4, ip
 8000680:	2700      	movs	r7, #0
 8000682:	b11e      	cbz	r6, 800068c <__udivmoddi4+0xa0>
 8000684:	40d4      	lsrs	r4, r2
 8000686:	2300      	movs	r3, #0
 8000688:	e9c6 4300 	strd	r4, r3, [r6]
 800068c:	4639      	mov	r1, r7
 800068e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000692:	428b      	cmp	r3, r1
 8000694:	d909      	bls.n	80006aa <__udivmoddi4+0xbe>
 8000696:	2e00      	cmp	r6, #0
 8000698:	f000 80eb 	beq.w	8000872 <__udivmoddi4+0x286>
 800069c:	2700      	movs	r7, #0
 800069e:	e9c6 0100 	strd	r0, r1, [r6]
 80006a2:	4638      	mov	r0, r7
 80006a4:	4639      	mov	r1, r7
 80006a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006aa:	fab3 f783 	clz	r7, r3
 80006ae:	2f00      	cmp	r7, #0
 80006b0:	d147      	bne.n	8000742 <__udivmoddi4+0x156>
 80006b2:	428b      	cmp	r3, r1
 80006b4:	d302      	bcc.n	80006bc <__udivmoddi4+0xd0>
 80006b6:	4282      	cmp	r2, r0
 80006b8:	f200 80fa 	bhi.w	80008b0 <__udivmoddi4+0x2c4>
 80006bc:	1a84      	subs	r4, r0, r2
 80006be:	eb61 0303 	sbc.w	r3, r1, r3
 80006c2:	2001      	movs	r0, #1
 80006c4:	4698      	mov	r8, r3
 80006c6:	2e00      	cmp	r6, #0
 80006c8:	d0e0      	beq.n	800068c <__udivmoddi4+0xa0>
 80006ca:	e9c6 4800 	strd	r4, r8, [r6]
 80006ce:	e7dd      	b.n	800068c <__udivmoddi4+0xa0>
 80006d0:	b902      	cbnz	r2, 80006d4 <__udivmoddi4+0xe8>
 80006d2:	deff      	udf	#255	; 0xff
 80006d4:	fab2 f282 	clz	r2, r2
 80006d8:	2a00      	cmp	r2, #0
 80006da:	f040 808f 	bne.w	80007fc <__udivmoddi4+0x210>
 80006de:	1b49      	subs	r1, r1, r5
 80006e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006e4:	fa1f f885 	uxth.w	r8, r5
 80006e8:	2701      	movs	r7, #1
 80006ea:	fbb1 fcfe 	udiv	ip, r1, lr
 80006ee:	0c23      	lsrs	r3, r4, #16
 80006f0:	fb0e 111c 	mls	r1, lr, ip, r1
 80006f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006f8:	fb08 f10c 	mul.w	r1, r8, ip
 80006fc:	4299      	cmp	r1, r3
 80006fe:	d907      	bls.n	8000710 <__udivmoddi4+0x124>
 8000700:	18eb      	adds	r3, r5, r3
 8000702:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000706:	d202      	bcs.n	800070e <__udivmoddi4+0x122>
 8000708:	4299      	cmp	r1, r3
 800070a:	f200 80cd 	bhi.w	80008a8 <__udivmoddi4+0x2bc>
 800070e:	4684      	mov	ip, r0
 8000710:	1a59      	subs	r1, r3, r1
 8000712:	b2a3      	uxth	r3, r4
 8000714:	fbb1 f0fe 	udiv	r0, r1, lr
 8000718:	fb0e 1410 	mls	r4, lr, r0, r1
 800071c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000720:	fb08 f800 	mul.w	r8, r8, r0
 8000724:	45a0      	cmp	r8, r4
 8000726:	d907      	bls.n	8000738 <__udivmoddi4+0x14c>
 8000728:	192c      	adds	r4, r5, r4
 800072a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800072e:	d202      	bcs.n	8000736 <__udivmoddi4+0x14a>
 8000730:	45a0      	cmp	r8, r4
 8000732:	f200 80b6 	bhi.w	80008a2 <__udivmoddi4+0x2b6>
 8000736:	4618      	mov	r0, r3
 8000738:	eba4 0408 	sub.w	r4, r4, r8
 800073c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000740:	e79f      	b.n	8000682 <__udivmoddi4+0x96>
 8000742:	f1c7 0c20 	rsb	ip, r7, #32
 8000746:	40bb      	lsls	r3, r7
 8000748:	fa22 fe0c 	lsr.w	lr, r2, ip
 800074c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000750:	fa01 f407 	lsl.w	r4, r1, r7
 8000754:	fa20 f50c 	lsr.w	r5, r0, ip
 8000758:	fa21 f30c 	lsr.w	r3, r1, ip
 800075c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000760:	4325      	orrs	r5, r4
 8000762:	fbb3 f9f8 	udiv	r9, r3, r8
 8000766:	0c2c      	lsrs	r4, r5, #16
 8000768:	fb08 3319 	mls	r3, r8, r9, r3
 800076c:	fa1f fa8e 	uxth.w	sl, lr
 8000770:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000774:	fb09 f40a 	mul.w	r4, r9, sl
 8000778:	429c      	cmp	r4, r3
 800077a:	fa02 f207 	lsl.w	r2, r2, r7
 800077e:	fa00 f107 	lsl.w	r1, r0, r7
 8000782:	d90b      	bls.n	800079c <__udivmoddi4+0x1b0>
 8000784:	eb1e 0303 	adds.w	r3, lr, r3
 8000788:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800078c:	f080 8087 	bcs.w	800089e <__udivmoddi4+0x2b2>
 8000790:	429c      	cmp	r4, r3
 8000792:	f240 8084 	bls.w	800089e <__udivmoddi4+0x2b2>
 8000796:	f1a9 0902 	sub.w	r9, r9, #2
 800079a:	4473      	add	r3, lr
 800079c:	1b1b      	subs	r3, r3, r4
 800079e:	b2ad      	uxth	r5, r5
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007ac:	fb00 fa0a 	mul.w	sl, r0, sl
 80007b0:	45a2      	cmp	sl, r4
 80007b2:	d908      	bls.n	80007c6 <__udivmoddi4+0x1da>
 80007b4:	eb1e 0404 	adds.w	r4, lr, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007bc:	d26b      	bcs.n	8000896 <__udivmoddi4+0x2aa>
 80007be:	45a2      	cmp	sl, r4
 80007c0:	d969      	bls.n	8000896 <__udivmoddi4+0x2aa>
 80007c2:	3802      	subs	r0, #2
 80007c4:	4474      	add	r4, lr
 80007c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ca:	fba0 8902 	umull	r8, r9, r0, r2
 80007ce:	eba4 040a 	sub.w	r4, r4, sl
 80007d2:	454c      	cmp	r4, r9
 80007d4:	46c2      	mov	sl, r8
 80007d6:	464b      	mov	r3, r9
 80007d8:	d354      	bcc.n	8000884 <__udivmoddi4+0x298>
 80007da:	d051      	beq.n	8000880 <__udivmoddi4+0x294>
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d069      	beq.n	80008b4 <__udivmoddi4+0x2c8>
 80007e0:	ebb1 050a 	subs.w	r5, r1, sl
 80007e4:	eb64 0403 	sbc.w	r4, r4, r3
 80007e8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80007ec:	40fd      	lsrs	r5, r7
 80007ee:	40fc      	lsrs	r4, r7
 80007f0:	ea4c 0505 	orr.w	r5, ip, r5
 80007f4:	e9c6 5400 	strd	r5, r4, [r6]
 80007f8:	2700      	movs	r7, #0
 80007fa:	e747      	b.n	800068c <__udivmoddi4+0xa0>
 80007fc:	f1c2 0320 	rsb	r3, r2, #32
 8000800:	fa20 f703 	lsr.w	r7, r0, r3
 8000804:	4095      	lsls	r5, r2
 8000806:	fa01 f002 	lsl.w	r0, r1, r2
 800080a:	fa21 f303 	lsr.w	r3, r1, r3
 800080e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000812:	4338      	orrs	r0, r7
 8000814:	0c01      	lsrs	r1, r0, #16
 8000816:	fbb3 f7fe 	udiv	r7, r3, lr
 800081a:	fa1f f885 	uxth.w	r8, r5
 800081e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000822:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000826:	fb07 f308 	mul.w	r3, r7, r8
 800082a:	428b      	cmp	r3, r1
 800082c:	fa04 f402 	lsl.w	r4, r4, r2
 8000830:	d907      	bls.n	8000842 <__udivmoddi4+0x256>
 8000832:	1869      	adds	r1, r5, r1
 8000834:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000838:	d22f      	bcs.n	800089a <__udivmoddi4+0x2ae>
 800083a:	428b      	cmp	r3, r1
 800083c:	d92d      	bls.n	800089a <__udivmoddi4+0x2ae>
 800083e:	3f02      	subs	r7, #2
 8000840:	4429      	add	r1, r5
 8000842:	1acb      	subs	r3, r1, r3
 8000844:	b281      	uxth	r1, r0
 8000846:	fbb3 f0fe 	udiv	r0, r3, lr
 800084a:	fb0e 3310 	mls	r3, lr, r0, r3
 800084e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000852:	fb00 f308 	mul.w	r3, r0, r8
 8000856:	428b      	cmp	r3, r1
 8000858:	d907      	bls.n	800086a <__udivmoddi4+0x27e>
 800085a:	1869      	adds	r1, r5, r1
 800085c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000860:	d217      	bcs.n	8000892 <__udivmoddi4+0x2a6>
 8000862:	428b      	cmp	r3, r1
 8000864:	d915      	bls.n	8000892 <__udivmoddi4+0x2a6>
 8000866:	3802      	subs	r0, #2
 8000868:	4429      	add	r1, r5
 800086a:	1ac9      	subs	r1, r1, r3
 800086c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000870:	e73b      	b.n	80006ea <__udivmoddi4+0xfe>
 8000872:	4637      	mov	r7, r6
 8000874:	4630      	mov	r0, r6
 8000876:	e709      	b.n	800068c <__udivmoddi4+0xa0>
 8000878:	4607      	mov	r7, r0
 800087a:	e6e7      	b.n	800064c <__udivmoddi4+0x60>
 800087c:	4618      	mov	r0, r3
 800087e:	e6fb      	b.n	8000678 <__udivmoddi4+0x8c>
 8000880:	4541      	cmp	r1, r8
 8000882:	d2ab      	bcs.n	80007dc <__udivmoddi4+0x1f0>
 8000884:	ebb8 0a02 	subs.w	sl, r8, r2
 8000888:	eb69 020e 	sbc.w	r2, r9, lr
 800088c:	3801      	subs	r0, #1
 800088e:	4613      	mov	r3, r2
 8000890:	e7a4      	b.n	80007dc <__udivmoddi4+0x1f0>
 8000892:	4660      	mov	r0, ip
 8000894:	e7e9      	b.n	800086a <__udivmoddi4+0x27e>
 8000896:	4618      	mov	r0, r3
 8000898:	e795      	b.n	80007c6 <__udivmoddi4+0x1da>
 800089a:	4667      	mov	r7, ip
 800089c:	e7d1      	b.n	8000842 <__udivmoddi4+0x256>
 800089e:	4681      	mov	r9, r0
 80008a0:	e77c      	b.n	800079c <__udivmoddi4+0x1b0>
 80008a2:	3802      	subs	r0, #2
 80008a4:	442c      	add	r4, r5
 80008a6:	e747      	b.n	8000738 <__udivmoddi4+0x14c>
 80008a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80008ac:	442b      	add	r3, r5
 80008ae:	e72f      	b.n	8000710 <__udivmoddi4+0x124>
 80008b0:	4638      	mov	r0, r7
 80008b2:	e708      	b.n	80006c6 <__udivmoddi4+0xda>
 80008b4:	4637      	mov	r7, r6
 80008b6:	e6e9      	b.n	800068c <__udivmoddi4+0xa0>

080008b8 <__aeabi_idiv0>:
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <calculateEngineRPM>:
#include <math.h>

/**
 * Calculate Engine RPM based on measured ticks from Camshaft Sensor period.
 */
uint16_t calculateEngineRPM(uint16_t ticks) {
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
	float engine_rpm = (1.0f / ((float)ticks * 38.0f * 2.631E-6f) * 60.0f) * 2.0f;
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008d0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000924 <calculateEngineRPM+0x68>
 80008d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000928 <calculateEngineRPM+0x6c>
 80008dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80008e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008e8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800092c <calculateEngineRPM+0x70>
 80008ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008f4:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t int_engine_rpm = (uint16_t)round(engine_rpm);
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f7ff fde7 	bl	80004cc <__aeabi_f2d>
 80008fe:	4603      	mov	r3, r0
 8000900:	460c      	mov	r4, r1
 8000902:	ec44 3b10 	vmov	d0, r3, r4
 8000906:	f004 fa39 	bl	8004d7c <round>
 800090a:	ec54 3b10 	vmov	r3, r4, d0
 800090e:	4618      	mov	r0, r3
 8000910:	4621      	mov	r1, r4
 8000912:	f7ff fe33 	bl	800057c <__aeabi_d2uiz>
 8000916:	4603      	mov	r3, r0
 8000918:	817b      	strh	r3, [r7, #10]
	return int_engine_rpm;
 800091a:	897b      	ldrh	r3, [r7, #10]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	42180000 	.word	0x42180000
 8000928:	3630903c 	.word	0x3630903c
 800092c:	42700000 	.word	0x42700000

08000930 <IgnitionMap_initialize>:
float y_min;
float x_max;
float y_max;


void IgnitionMap_initialize() {
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	x_min = X[0];
 8000934:	eddf 7a10 	vldr	s15, [pc, #64]	; 8000978 <IgnitionMap_initialize+0x48>
 8000938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <IgnitionMap_initialize+0x4c>)
 800093e:	edc3 7a00 	vstr	s15, [r3]
	y_min = Y[0];
 8000942:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000980 <IgnitionMap_initialize+0x50>
 8000946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <IgnitionMap_initialize+0x54>)
 800094c:	edc3 7a00 	vstr	s15, [r3]
	x_max = X[COLS-1];
 8000950:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000988 <IgnitionMap_initialize+0x58>
 8000954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <IgnitionMap_initialize+0x5c>)
 800095a:	edc3 7a00 	vstr	s15, [r3]
	y_max = Y[ROWS-1];
 800095e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000990 <IgnitionMap_initialize+0x60>
 8000962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <IgnitionMap_initialize+0x64>)
 8000968:	edc3 7a00 	vstr	s15, [r3]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	000001bf 	.word	0x000001bf
 800097c:	2000006c 	.word	0x2000006c
 8000980:	000000fa 	.word	0x000000fa
 8000984:	20000068 	.word	0x20000068
 8000988:	00000379 	.word	0x00000379
 800098c:	20000074 	.word	0x20000074
 8000990:	00001388 	.word	0x00001388
 8000994:	20000070 	.word	0x20000070

08000998 <IgnitionMap_getFiringAngle>:

uint16_t IgnitionMap_getFiringAngle(uint16_t x_pressure, uint16_t y_rpm) {
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	80fb      	strh	r3, [r7, #6]
 80009a4:	4613      	mov	r3, r2
 80009a6:	80bb      	strh	r3, [r7, #4]
	/* Limit pressure (in mv) to x_min < x_pressure < x_max */
	if(x_pressure > x_max)
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	ee07 3a90 	vmov	s15, r3
 80009ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009b2:	4b98      	ldr	r3, [pc, #608]	; (8000c14 <IgnitionMap_getFiringAngle+0x27c>)
 80009b4:	edd3 7a00 	vldr	s15, [r3]
 80009b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c0:	dd08      	ble.n	80009d4 <IgnitionMap_getFiringAngle+0x3c>
	{
		x_pressure = x_max;
 80009c2:	4b94      	ldr	r3, [pc, #592]	; (8000c14 <IgnitionMap_getFiringAngle+0x27c>)
 80009c4:	edd3 7a00 	vldr	s15, [r3]
 80009c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009cc:	ee17 3a90 	vmov	r3, s15
 80009d0:	80fb      	strh	r3, [r7, #6]
 80009d2:	e014      	b.n	80009fe <IgnitionMap_getFiringAngle+0x66>
	}
	else if(x_pressure < x_min)
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009de:	4b8e      	ldr	r3, [pc, #568]	; (8000c18 <IgnitionMap_getFiringAngle+0x280>)
 80009e0:	edd3 7a00 	vldr	s15, [r3]
 80009e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ec:	d507      	bpl.n	80009fe <IgnitionMap_getFiringAngle+0x66>
	{
		x_pressure = x_min;
 80009ee:	4b8a      	ldr	r3, [pc, #552]	; (8000c18 <IgnitionMap_getFiringAngle+0x280>)
 80009f0:	edd3 7a00 	vldr	s15, [r3]
 80009f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f8:	ee17 3a90 	vmov	r3, s15
 80009fc:	80fb      	strh	r3, [r7, #6]
	}

	/* Limit RPM to y_min < y_rpm < y_max */
	if(y_rpm > y_max)
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	ee07 3a90 	vmov	s15, r3
 8000a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a08:	4b84      	ldr	r3, [pc, #528]	; (8000c1c <IgnitionMap_getFiringAngle+0x284>)
 8000a0a:	edd3 7a00 	vldr	s15, [r3]
 8000a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a16:	dd08      	ble.n	8000a2a <IgnitionMap_getFiringAngle+0x92>
	{
		y_rpm = y_max;
 8000a18:	4b80      	ldr	r3, [pc, #512]	; (8000c1c <IgnitionMap_getFiringAngle+0x284>)
 8000a1a:	edd3 7a00 	vldr	s15, [r3]
 8000a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a22:	ee17 3a90 	vmov	r3, s15
 8000a26:	80bb      	strh	r3, [r7, #4]
 8000a28:	e014      	b.n	8000a54 <IgnitionMap_getFiringAngle+0xbc>
	}
	else if(y_rpm < y_min)
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a34:	4b7a      	ldr	r3, [pc, #488]	; (8000c20 <IgnitionMap_getFiringAngle+0x288>)
 8000a36:	edd3 7a00 	vldr	s15, [r3]
 8000a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	d507      	bpl.n	8000a54 <IgnitionMap_getFiringAngle+0xbc>
	{
		y_rpm = y_min;
 8000a44:	4b76      	ldr	r3, [pc, #472]	; (8000c20 <IgnitionMap_getFiringAngle+0x288>)
 8000a46:	edd3 7a00 	vldr	s15, [r3]
 8000a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a4e:	ee17 3a90 	vmov	r3, s15
 8000a52:	80bb      	strh	r3, [r7, #4]
	/* Do interpolation*/

	/* Row and column indices */
	uint8_t row_idx, col_idx;

	float estimated = 0;
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
	float fractional_col = 0, fractional_row = 0;
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]

	/* Find integer and fractional part of column index */
	fractional_col = (COLS - 1) * (x_pressure - x_min) / (x_max - x_min);
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a70:	4b69      	ldr	r3, [pc, #420]	; (8000c18 <IgnitionMap_getFiringAngle+0x280>)
 8000a72:	edd3 7a00 	vldr	s15, [r3]
 8000a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a7a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000a7e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000a82:	4b64      	ldr	r3, [pc, #400]	; (8000c14 <IgnitionMap_getFiringAngle+0x27c>)
 8000a84:	ed93 7a00 	vldr	s14, [r3]
 8000a88:	4b63      	ldr	r3, [pc, #396]	; (8000c18 <IgnitionMap_getFiringAngle+0x280>)
 8000a8a:	edd3 7a00 	vldr	s15, [r3]
 8000a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a96:	edc7 7a04 	vstr	s15, [r7, #16]
	col_idx = (uint8_t)fractional_col;
 8000a9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa2:	edc7 7a00 	vstr	s15, [r7]
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	72fb      	strb	r3, [r7, #11]
	fractional_col = fractional_col - col_idx;
 8000aaa:	7afb      	ldrb	r3, [r7, #11]
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab4:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000abc:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Find integer and fractional part of row index */
	fractional_row = (ROWS-1) * (y_rpm - y_min) / (y_max - y_min);
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aca:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <IgnitionMap_getFiringAngle+0x288>)
 8000acc:	edd3 7a00 	vldr	s15, [r3]
 8000ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ad4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8000ad8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000adc:	4b4f      	ldr	r3, [pc, #316]	; (8000c1c <IgnitionMap_getFiringAngle+0x284>)
 8000ade:	ed93 7a00 	vldr	s14, [r3]
 8000ae2:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <IgnitionMap_getFiringAngle+0x288>)
 8000ae4:	edd3 7a00 	vldr	s15, [r3]
 8000ae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000af0:	edc7 7a03 	vstr	s15, [r7, #12]
	row_idx = (uint8_t)fractional_row;
 8000af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afc:	edc7 7a00 	vstr	s15, [r7]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	72bb      	strb	r3, [r7, #10]
	fractional_row = fractional_row - row_idx;
 8000b04:	7abb      	ldrb	r3, [r7, #10]
 8000b06:	ee07 3a90 	vmov	s15, r3
 8000b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b16:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Calculate interpolated estimate */
	estimated = (1-fractional_col) * (1-fractional_row) * ignition_map[row_idx][col_idx]
 8000b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b36:	7aba      	ldrb	r2, [r7, #10]
 8000b38:	7afb      	ldrb	r3, [r7, #11]
 8000b3a:	493a      	ldr	r1, [pc, #232]	; (8000c24 <IgnitionMap_getFiringAngle+0x28c>)
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	4413      	add	r3, r2
 8000b40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
                 + fractional_col * (1-fractional_row) * ignition_map[row_idx][col_idx+1]
 8000b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b64:	7aba      	ldrb	r2, [r7, #10]
 8000b66:	7afb      	ldrb	r3, [r7, #11]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	492e      	ldr	r1, [pc, #184]	; (8000c24 <IgnitionMap_getFiringAngle+0x28c>)
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	4413      	add	r3, r2
 8000b70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b74:	ee07 3a90 	vmov	s15, r3
 8000b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b80:	ee37 7a27 	vadd.f32	s14, s14, s15
				 + (1-fractional_col) * fractional_row * ignition_map[row_idx+1][col_idx]
 8000b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000b88:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b98:	7abb      	ldrb	r3, [r7, #10]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	7afb      	ldrb	r3, [r7, #11]
 8000b9e:	4921      	ldr	r1, [pc, #132]	; (8000c24 <IgnitionMap_getFiringAngle+0x28c>)
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	4413      	add	r3, r2
 8000ba4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ba8:	ee07 3a90 	vmov	s15, r3
 8000bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb4:	ee37 7a27 	vadd.f32	s14, s14, s15
				 + fractional_col * fractional_row * ignition_map[row_idx+1][col_idx+1];
 8000bb8:	edd7 6a04 	vldr	s13, [r7, #16]
 8000bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bc4:	7abb      	ldrb	r3, [r7, #10]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	7afb      	ldrb	r3, [r7, #11]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4915      	ldr	r1, [pc, #84]	; (8000c24 <IgnitionMap_getFiringAngle+0x28c>)
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bd6:	ee07 3a90 	vmov	s15, r3
 8000bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
	estimated = (1-fractional_col) * (1-fractional_row) * ignition_map[row_idx][col_idx]
 8000be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be6:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Rounded to 1 decimal place */
	return (uint16_t)round(estimated);
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff fc6e 	bl	80004cc <__aeabi_f2d>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	ec44 3b10 	vmov	d0, r3, r4
 8000bf8:	f004 f8c0 	bl	8004d7c <round>
 8000bfc:	ec54 3b10 	vmov	r3, r4, d0
 8000c00:	4618      	mov	r0, r3
 8000c02:	4621      	mov	r1, r4
 8000c04:	f7ff fcba 	bl	800057c <__aeabi_d2uiz>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b29b      	uxth	r3, r3
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	371c      	adds	r7, #28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	20000074 	.word	0x20000074
 8000c18:	2000006c 	.word	0x2000006c
 8000c1c:	20000070 	.word	0x20000070
 8000c20:	20000068 	.word	0x20000068
 8000c24:	08004e28 	.word	0x08004e28

08000c28 <MovAvg_reset>:
float sum = 0;         /** Sum of the values currently in the buffer */

float values[38];      /** Buffer */
int oldest_idx = 0;    /** Keeps track of the index of the oldest value */

void MovAvg_reset(int max_values) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	count = 0;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MovAvg_reset+0x30>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
	mean = 0;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MovAvg_reset+0x34>)
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
	sum = 0;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MovAvg_reset+0x38>)
 8000c40:	f04f 0200 	mov.w	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
	N = max_values;
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <MovAvg_reset+0x3c>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	2000002c 	.word	0x2000002c
 8000c5c:	20000030 	.word	0x20000030
 8000c60:	20000034 	.word	0x20000034
 8000c64:	20000028 	.word	0x20000028

08000c68 <MovAvg_update>:

void MovAvg_update(uint32_t newValue) {
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	if(N == 0)
 8000c70:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <MovAvg_update+0x108>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d075      	beq.n	8000d64 <MovAvg_update+0xfc>
	{
		return;
	}

	/* First fill the buffer if not enough elements are there */
	if(count < N)
 8000c78:	4b3e      	ldr	r3, [pc, #248]	; (8000d74 <MovAvg_update+0x10c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <MovAvg_update+0x108>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	da2c      	bge.n	8000cde <MovAvg_update+0x76>
	{
		values[count] = (float)newValue;
 8000c84:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <MovAvg_update+0x10c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	ee07 2a90 	vmov	s15, r2
 8000c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c92:	4a39      	ldr	r2, [pc, #228]	; (8000d78 <MovAvg_update+0x110>)
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	edc3 7a00 	vstr	s15, [r3]
		sum += (float)newValue;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ca6:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <MovAvg_update+0x114>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb0:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <MovAvg_update+0x114>)
 8000cb2:	edc3 7a00 	vstr	s15, [r3]
		count++;
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <MovAvg_update+0x10c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <MovAvg_update+0x10c>)
 8000cbe:	6013      	str	r3, [r2, #0]
		mean = sum / (float)count;
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <MovAvg_update+0x114>)
 8000cc2:	edd3 6a00 	vldr	s13, [r3]
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <MovAvg_update+0x10c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	ee07 3a90 	vmov	s15, r3
 8000cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MovAvg_update+0x118>)
 8000cd8:	edc3 7a00 	vstr	s15, [r3]
 8000cdc:	e043      	b.n	8000d66 <MovAvg_update+0xfe>
	}
	else
	{
		/* Subtract old value from total sum */
		sum -= values[oldest_idx];
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <MovAvg_update+0x114>)
 8000ce0:	ed93 7a00 	vldr	s14, [r3]
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <MovAvg_update+0x11c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MovAvg_update+0x110>)
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	edd3 7a00 	vldr	s15, [r3]
 8000cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MovAvg_update+0x114>)
 8000cf8:	edc3 7a00 	vstr	s15, [r3]
		/* Add new value to total sum */
		sum += (float)newValue;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MovAvg_update+0x114>)
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MovAvg_update+0x114>)
 8000d12:	edc3 7a00 	vstr	s15, [r3]
		/* Calculate mean based on the new sum */
		mean = sum / (float)N;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MovAvg_update+0x114>)
 8000d18:	edd3 6a00 	vldr	s13, [r3]
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MovAvg_update+0x108>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MovAvg_update+0x118>)
 8000d2e:	edc3 7a00 	vstr	s15, [r3]

		//mean = mean + 1.0f/(float)N * ((float)newValue - values[oldest_idx]);

		/* Store new value in the array and replace the old one */
		values[oldest_idx] = (float)newValue;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MovAvg_update+0x11c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	ee07 2a90 	vmov	s15, r2
 8000d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <MovAvg_update+0x110>)
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	edc3 7a00 	vstr	s15, [r3]

		/* Increment the index of the oldest value */
		oldest_idx++;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MovAvg_update+0x11c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <MovAvg_update+0x11c>)
 8000d52:	6013      	str	r3, [r2, #0]
		if(oldest_idx == 38)
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MovAvg_update+0x11c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b26      	cmp	r3, #38	; 0x26
 8000d5a:	d104      	bne.n	8000d66 <MovAvg_update+0xfe>
		{
			oldest_idx = 0;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MovAvg_update+0x11c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e000      	b.n	8000d66 <MovAvg_update+0xfe>
		return;
 8000d64:	bf00      	nop
		}
	}
}
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20000028 	.word	0x20000028
 8000d74:	2000002c 	.word	0x2000002c
 8000d78:	20000078 	.word	0x20000078
 8000d7c:	20000034 	.word	0x20000034
 8000d80:	20000030 	.word	0x20000030
 8000d84:	20000038 	.word	0x20000038

08000d88 <MovAvg_getMean>:

uint32_t MovAvg_getMean() {
 8000d88:	b598      	push	{r3, r4, r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	return round(mean);
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MovAvg_getMean+0x2c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fb9b 	bl	80004cc <__aeabi_f2d>
 8000d96:	4603      	mov	r3, r0
 8000d98:	460c      	mov	r4, r1
 8000d9a:	ec44 3b10 	vmov	d0, r3, r4
 8000d9e:	f003 ffed 	bl	8004d7c <round>
 8000da2:	ec54 3b10 	vmov	r3, r4, d0
 8000da6:	4618      	mov	r0, r3
 8000da8:	4621      	mov	r1, r4
 8000daa:	f7ff fbe7 	bl	800057c <__aeabi_d2uiz>
 8000dae:	4603      	mov	r3, r0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd98      	pop	{r3, r4, r7, pc}
 8000db4:	20000030 	.word	0x20000030

08000db8 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_ADC2_Init+0xa0>)
 8000dce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000dd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dd6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000dda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dde:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_ADC2_Init+0xa4>)
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000e1c:	f000 ffbe 	bl	8001d9c <HAL_ADC_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000e26:	f000 f995 	bl	8001154 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <MX_ADC2_Init+0x9c>)
 8000e3c:	f001 fa2e 	bl	800229c <HAL_ADC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000e46:	f000 f985 	bl	8001154 <Error_Handler>
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000110 	.word	0x20000110
 8000e58:	40012100 	.word	0x40012100
 8000e5c:	0f000001 	.word	0x0f000001

08000e60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <HAL_ADC_MspInit+0x8c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12f      	bne.n	8000ee2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_ADC_MspInit+0x90>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <HAL_ADC_MspInit+0x90>)
 8000e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_ADC_MspInit+0x90>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_ADC_MspInit+0x90>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <HAL_ADC_MspInit+0x90>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_ADC_MspInit+0x90>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_ADC_MspInit+0x94>)
 8000ece:	f001 fd2f 	bl	8002930 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2012      	movs	r0, #18
 8000ed8:	f001 fcf3 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000edc:	2012      	movs	r0, #18
 8000ede:	f001 fd0c 	bl	80028fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40012100 	.word	0x40012100
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Zylinder13_Zuendung_Pin|Zylinder24_Zuendung_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2103      	movs	r1, #3
 8000f82:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <MX_GPIO_Init+0xe0>)
 8000f84:	f001 fe66 	bl	8002c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDPin_GPIO_Port, LEDPin_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	4813      	ldr	r0, [pc, #76]	; (8000fdc <MX_GPIO_Init+0xe4>)
 8000f8e:	f001 fe61 	bl	8002c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Zylinder13_Zuendung_Pin|Zylinder24_Zuendung_Pin;
 8000f92:	2303      	movs	r3, #3
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <MX_GPIO_Init+0xe0>)
 8000faa:	f001 fcc1 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDPin_Pin;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDPin_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_GPIO_Init+0xe4>)
 8000fc6:	f001 fcb3 	bl	8002930 <HAL_GPIO_Init>

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <init_TIM3_overflow_event>:
	HAL_UART_Transmit(&huart2, (uint8_t*)str, len, 0xFFFF);

	__enable_irq();
}

void init_TIM3_overflow_event() {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	/* Enable generation of update event */
	__HAL_TIM_URS_ENABLE(&htim3);
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <init_TIM3_overflow_event+0x38>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <init_TIM3_overflow_event+0x38>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0204 	orr.w	r2, r2, #4
 8000ff2:	601a      	str	r2, [r3, #0]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <init_TIM3_overflow_event+0x38>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f06f 0201 	mvn.w	r2, #1
 8000ffc:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <init_TIM3_overflow_event+0x38>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <init_TIM3_overflow_event+0x38>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f042 0201 	orr.w	r2, r2, #1
 800100c:	60da      	str	r2, [r3, #12]
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	20000198 	.word	0x20000198

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f000 fe4a 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f828 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f7ff ff66 	bl	8000ef8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800102c:	f000 fda8 	bl	8001b80 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001030:	f7ff fec2 	bl	8000db8 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001034:	f000 fc42 	bl	80018bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001038:	f000 fcc0 	bl	80019bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	IgnitionMap_initialize();
 800103c:	f7ff fc78 	bl	8000930 <IgnitionMap_initialize>
	init_TIM4_stuff();
 8001040:	f000 fbf0 	bl	8001824 <init_TIM4_stuff>
	init_TIM3_overflow_event();
 8001044:	f7ff ffcc 	bl	8000fe0 <init_TIM3_overflow_event>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	MovAvg_reset(38);
 8001048:	2026      	movs	r0, #38	; 0x26
 800104a:	f7ff fded 	bl	8000c28 <MovAvg_reset>

	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800104e:	2100      	movs	r1, #0
 8001050:	4806      	ldr	r0, [pc, #24]	; (800106c <main+0x50>)
 8001052:	f002 fbe3 	bl	800381c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001056:	2104      	movs	r1, #4
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <main+0x50>)
 800105a:	f002 fbdf 	bl	800381c <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <main+0x54>)
 8001060:	f002 fb4d 	bl	80036fe <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_IT(&hadc2);
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <main+0x58>)
 8001066:	f000 fedd 	bl	8001e24 <HAL_ADC_Start_IT>
	while (1)
 800106a:	e7fe      	b.n	800106a <main+0x4e>
 800106c:	20000198 	.word	0x20000198
 8001070:	20000158 	.word	0x20000158
 8001074:	20000110 	.word	0x20000110

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	2234      	movs	r2, #52	; 0x34
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fe70 	bl	8004d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <SystemClock_Config+0xd4>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a29      	ldr	r2, [pc, #164]	; (800114c <SystemClock_Config+0xd4>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <SystemClock_Config+0xd4>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <SystemClock_Config+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c4:	4a22      	ldr	r2, [pc, #136]	; (8001150 <SystemClock_Config+0xd8>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <SystemClock_Config+0xd8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2302      	movs	r3, #2
 80010da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010ec:	2310      	movs	r3, #16
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010f6:	2304      	movs	r3, #4
 80010f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010fe:	2302      	movs	r3, #2
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4618      	mov	r0, r3
 8001108:	f002 f874 	bl	80031f4 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001112:	f000 f81f 	bl	8001154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fda8 	bl	8002c88 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800113e:	f000 f809 	bl	8001154 <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	; 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_MspInit+0x4c>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_MspInit+0x4c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001208:	f000 fda8 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	mapSensorValue = HAL_ADC_GetValue(&hadc2);
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <ADC_IRQHandler+0x24>)
 8001216:	f001 f816 	bl	8002246 <HAL_ADC_GetValue>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <ADC_IRQHandler+0x28>)
 8001220:	801a      	strh	r2, [r3, #0]
	adc_ready = 1;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <ADC_IRQHandler+0x2c>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <ADC_IRQHandler+0x24>)
 800122a:	f000 fecb 	bl	8001fc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000110 	.word	0x20000110
 8001238:	2000003e 	.word	0x2000003e
 800123c:	2000003c 	.word	0x2000003c

08001240 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08b      	sub	sp, #44	; 0x2c
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	/*
	 * Check if we are called due to an overflow
	 */
	if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET)
 8001246:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <TIM3_IRQHandler+0x168>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d11d      	bne.n	8001290 <TIM3_IRQHandler+0x50>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_UPDATE) != RESET)
 8001254:	4b54      	ldr	r3, [pc, #336]	; (80013a8 <TIM3_IRQHandler+0x168>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b01      	cmp	r3, #1
 8001260:	d116      	bne.n	8001290 <TIM3_IRQHandler+0x50>
		{
			/* Only count the overflow if it is between rising and falling edge */
			if(rising_valid)
 8001262:	4b52      	ldr	r3, [pc, #328]	; (80013ac <TIM3_IRQHandler+0x16c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <TIM3_IRQHandler+0x3a>
			{
				++overflows;
 800126c:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <TIM3_IRQHandler+0x170>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3301      	adds	r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <TIM3_IRQHandler+0x170>)
 8001278:	701a      	strb	r2, [r3, #0]
			}

			__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 800127a:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <TIM3_IRQHandler+0x168>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f06f 0201 	mvn.w	r2, #1
 8001282:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8001284:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <TIM3_IRQHandler+0x168>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f06f 0201 	mvn.w	r2, #1
 800128c:	611a      	str	r2, [r3, #16]

			goto end_timer3_interrupt;
 800128e:	e177      	b.n	8001580 <TIM3_IRQHandler+0x340>


	/*
	 *  Capture compare 1 event (Channel 1 = Camshaft Sensor Rising Edge)
	 */
	if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC1) != RESET)
 8001290:	4b45      	ldr	r3, [pc, #276]	; (80013a8 <TIM3_IRQHandler+0x168>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b02      	cmp	r3, #2
 800129c:	d126      	bne.n	80012ec <TIM3_IRQHandler+0xac>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC1) != RESET)
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <TIM3_IRQHandler+0x168>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d11f      	bne.n	80012ec <TIM3_IRQHandler+0xac>
		{
			{
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC1);
 80012ac:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <TIM3_IRQHandler+0x168>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f06f 0202 	mvn.w	r2, #2
 80012b4:	611a      	str	r2, [r3, #16]
				htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <TIM3_IRQHandler+0x168>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	771a      	strb	r2, [r3, #28]

				/* Input capture event */
				if ((htim3.Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <TIM3_IRQHandler+0x168>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d010      	beq.n	80012ec <TIM3_IRQHandler+0xac>
				{
					rising_ticks = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80012ca:	2100      	movs	r1, #0
 80012cc:	4836      	ldr	r0, [pc, #216]	; (80013a8 <TIM3_IRQHandler+0x168>)
 80012ce:	f002 fdc9 	bl	8003e64 <HAL_TIM_ReadCapturedValue>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <TIM3_IRQHandler+0x174>)
 80012d6:	601a      	str	r2, [r3, #0]
					if(ignore_counter >= 20)
 80012d8:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <TIM3_IRQHandler+0x178>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b13      	cmp	r3, #19
 80012e0:	f240 8149 	bls.w	8001576 <TIM3_IRQHandler+0x336>
					{
						rising_valid = 1;
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <TIM3_IRQHandler+0x16c>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
					}
					goto end_timer3_interrupt;
 80012ea:	e144      	b.n	8001576 <TIM3_IRQHandler+0x336>


	/*
	 * Capture compare 2 event (Channel 2 = Camshaft Sensor Falling Edge)
	 */
	if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC2) != RESET)
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <TIM3_IRQHandler+0x168>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	f040 813f 	bne.w	800157a <TIM3_IRQHandler+0x33a>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC2) != RESET)
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <TIM3_IRQHandler+0x168>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b04      	cmp	r3, #4
 8001308:	f040 8137 	bne.w	800157a <TIM3_IRQHandler+0x33a>
		{
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC2);
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <TIM3_IRQHandler+0x168>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f06f 0204 	mvn.w	r2, #4
 8001314:	611a      	str	r2, [r3, #16]
			htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <TIM3_IRQHandler+0x168>)
 8001318:	2202      	movs	r2, #2
 800131a:	771a      	strb	r2, [r3, #28]

			/* Input capture event */
			if ((htim3.Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <TIM3_IRQHandler+0x168>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8127 	beq.w	800157a <TIM3_IRQHandler+0x33a>
			{

				/* Ignore the first 30 ticks after startup */
				if(ignore_counter < 30)
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <TIM3_IRQHandler+0x178>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b1d      	cmp	r3, #29
 8001334:	d807      	bhi.n	8001346 <TIM3_IRQHandler+0x106>
				{
					++ignore_counter;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <TIM3_IRQHandler+0x178>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	3301      	adds	r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <TIM3_IRQHandler+0x178>)
 8001342:	701a      	strb	r2, [r3, #0]
					goto end_timer3_interrupt;
 8001344:	e11c      	b.n	8001580 <TIM3_IRQHandler+0x340>
				}

				/* Only continue if we have a rising edge value from before */
				if(!rising_valid)
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <TIM3_IRQHandler+0x16c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8116 	beq.w	800157e <TIM3_IRQHandler+0x33e>
				{
					goto end_timer3_interrupt;
				}

				/* Read new timer ticks of this interrupt (falling edge) */
				uint32_t falling_ticks = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8001352:	2104      	movs	r1, #4
 8001354:	4814      	ldr	r0, [pc, #80]	; (80013a8 <TIM3_IRQHandler+0x168>)
 8001356:	f002 fd85 	bl	8003e64 <HAL_TIM_ReadCapturedValue>
 800135a:	6278      	str	r0, [r7, #36]	; 0x24

				/* Calculate diff between rising and falling (x2 to get T_period) */
				if(overflows > 0)
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <TIM3_IRQHandler+0x170>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00c      	beq.n	8001380 <TIM3_IRQHandler+0x140>
					/*
					 * Rising edge is valid and overflow occurred
					 * --> Overflow was between rising and falling edge
					 */

					diff = (uint32_t)65535 - rising_ticks + falling_ticks;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <TIM3_IRQHandler+0x174>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001372:	33ff      	adds	r3, #255	; 0xff
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <TIM3_IRQHandler+0x17c>)
 8001376:	6013      	str	r3, [r2, #0]
					overflows = 0;
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <TIM3_IRQHandler+0x170>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	e005      	b.n	800138c <TIM3_IRQHandler+0x14c>
				}
				else
				{
					diff = falling_ticks - rising_ticks;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <TIM3_IRQHandler+0x174>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <TIM3_IRQHandler+0x17c>)
 800138a:	6013      	str	r3, [r2, #0]
				}
				diff *= 2;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <TIM3_IRQHandler+0x17c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <TIM3_IRQHandler+0x17c>)
 8001394:	6013      	str	r3, [r2, #0]

				/* Fail-safe (just in case something is wrong and diff overflows) */
				if(diff > 65535)
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <TIM3_IRQHandler+0x17c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139e:	d313      	bcc.n	80013c8 <TIM3_IRQHandler+0x188>
				{
					rising_valid = 0;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <TIM3_IRQHandler+0x16c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
					goto end_timer3_interrupt;
 80013a6:	e0eb      	b.n	8001580 <TIM3_IRQHandler+0x340>
 80013a8:	20000198 	.word	0x20000198
 80013ac:	20000048 	.word	0x20000048
 80013b0:	20000049 	.word	0x20000049
 80013b4:	20000040 	.word	0x20000040
 80013b8:	2000004a 	.word	0x2000004a
 80013bc:	20000044 	.word	0x20000044
 80013c0:	3fcccccd 	.word	0x3fcccccd
 80013c4:	4019999a 	.word	0x4019999a
				}

				/* Check if we reached OT */
				float curAvg = (float)(MovAvg_getMean());
 80013c8:	f7ff fcde 	bl	8000d88 <MovAvg_getMean>
 80013cc:	ee07 0a90 	vmov	s15, r0
 80013d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013d4:	edc7 7a08 	vstr	s15, [r7, #32]
				float left = (float)curAvg*1.6f;
 80013d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80013dc:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 80013c0 <TIM3_IRQHandler+0x180>
 80013e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e4:	edc7 7a07 	vstr	s15, [r7, #28]
				float right = (float)curAvg*2.4f;
 80013e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80013ec:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 80013c4 <TIM3_IRQHandler+0x184>
 80013f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f4:	edc7 7a06 	vstr	s15, [r7, #24]

				/* OT reached? */
				if((diff > 0) && (diff > left) && (diff < right))
 80013f8:	4b65      	ldr	r3, [pc, #404]	; (8001590 <TIM3_IRQHandler+0x350>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80b1 	beq.w	8001564 <TIM3_IRQHandler+0x324>
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <TIM3_IRQHandler+0x350>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800140e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	f140 80a3 	bpl.w	8001564 <TIM3_IRQHandler+0x324>
 800141e:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <TIM3_IRQHandler+0x350>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800142a:	ed97 7a06 	vldr	s14, [r7, #24]
 800142e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	f340 8095 	ble.w	8001564 <TIM3_IRQHandler+0x324>
				{
					int firingAngle = IgnitionMap_getFiringAngle(mapSensorValue, calculateEngineRPM(curAvg));
 800143a:	4b56      	ldr	r3, [pc, #344]	; (8001594 <TIM3_IRQHandler+0x354>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	b29c      	uxth	r4, r3
 8001440:	edd7 7a08 	vldr	s15, [r7, #32]
 8001444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001448:	ee17 3a90 	vmov	r3, s15
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fa34 	bl	80008bc <calculateEngineRPM>
 8001454:	4603      	mov	r3, r0
 8001456:	4619      	mov	r1, r3
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff fa9d 	bl	8000998 <IgnitionMap_getFiringAngle>
 800145e:	4603      	mov	r3, r0
 8001460:	617b      	str	r3, [r7, #20]

					/* Calculate timer ticks for ignitions */
					float ticks_per_round = curAvg * 38.0f;
 8001462:	edd7 7a08 	vldr	s15, [r7, #32]
 8001466:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001598 <TIM3_IRQHandler+0x358>
 800146a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146e:	edc7 7a04 	vstr	s15, [r7, #16]
					float ignition_ticks = ticks_per_round / 4.0f;
 8001472:	ed97 7a04 	vldr	s14, [r7, #16]
 8001476:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800147a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147e:	edc7 7a03 	vstr	s15, [r7, #12]
					float ticks_per_degree = ignition_ticks / 90.0f;
 8001482:	ed97 7a03 	vldr	s14, [r7, #12]
 8001486:	eddf 6a45 	vldr	s13, [pc, #276]	; 800159c <TIM3_IRQHandler+0x35c>
 800148a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148e:	edc7 7a02 	vstr	s15, [r7, #8]
					float ticks_before_ot = ((float)firingAngle/10.0f) * ticks_per_degree + 5; /* 5 additional ticks to compensate for delay */
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ac:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80014b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b4:	edc7 7a01 	vstr	s15, [r7, #4]

					/*
					 * Set ticks for Timer 4 to start timer for ignition 2.
					 */
					last_cylinder = 0;
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <TIM3_IRQHandler+0x360>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]

					__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <TIM3_IRQHandler+0x364>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <TIM3_IRQHandler+0x364>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0202 	bic.w	r2, r2, #2
 80014cc:	60da      	str	r2, [r3, #12]
					__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <TIM3_IRQHandler+0x364>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <TIM3_IRQHandler+0x364>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	60da      	str	r2, [r3, #12]
					htim4.Instance->ARR = (uint16_t)(round(ignition_ticks));
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7fe fff4 	bl	80004cc <__aeabi_f2d>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	ec44 3b10 	vmov	d0, r3, r4
 80014ec:	f003 fc46 	bl	8004d7c <round>
 80014f0:	ec54 3b10 	vmov	r3, r4, d0
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff f840 	bl	800057c <__aeabi_d2uiz>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <TIM3_IRQHandler+0x364>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
					htim4.Instance->CNT = (uint16_t)(round(ticks_before_ot));
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7fe ffe0 	bl	80004cc <__aeabi_f2d>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	ec44 3b10 	vmov	d0, r3, r4
 8001514:	f003 fc32 	bl	8004d7c <round>
 8001518:	ec54 3b10 	vmov	r3, r4, d0
 800151c:	4618      	mov	r0, r3
 800151e:	4621      	mov	r1, r4
 8001520:	f7ff f82c 	bl	800057c <__aeabi_d2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <TIM3_IRQHandler+0x364>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <TIM3_IRQHandler+0x364>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f06f 0201 	mvn.w	r2, #1
 8001536:	611a      	str	r2, [r3, #16]

					/* Enable generation of update event */
					__HAL_TIM_URS_ENABLE(&htim4);
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <TIM3_IRQHandler+0x364>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <TIM3_IRQHandler+0x364>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0204 	orr.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
					__HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <TIM3_IRQHandler+0x364>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 0201 	mvn.w	r2, #1
 8001550:	611a      	str	r2, [r3, #16]
					__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <TIM3_IRQHandler+0x364>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <TIM3_IRQHandler+0x364>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	60da      	str	r2, [r3, #12]
				{
 8001562:	e004      	b.n	800156e <TIM3_IRQHandler+0x32e>
				}
				else
				{
					MovAvg_update(diff);
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <TIM3_IRQHandler+0x350>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fb7d 	bl	8000c68 <MovAvg_update>
				}

				rising_valid = 0;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <TIM3_IRQHandler+0x368>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e004      	b.n	8001580 <TIM3_IRQHandler+0x340>
					goto end_timer3_interrupt;
 8001576:	bf00      	nop
 8001578:	e002      	b.n	8001580 <TIM3_IRQHandler+0x340>
			}
		}
	}

	end_timer3_interrupt:
 800157a:	bf00      	nop
 800157c:	e000      	b.n	8001580 <TIM3_IRQHandler+0x340>
					goto end_timer3_interrupt;
 800157e:	bf00      	nop
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <TIM3_IRQHandler+0x36c>)
 8001582:	f002 f9b3 	bl	80038ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	372c      	adds	r7, #44	; 0x2c
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20000044 	.word	0x20000044
 8001594:	2000003e 	.word	0x2000003e
 8001598:	42180000 	.word	0x42180000
 800159c:	42b40000 	.word	0x42b40000
 80015a0:	2000004b 	.word	0x2000004b
 80015a4:	20000158 	.word	0x20000158
 80015a8:	20000048 	.word	0x20000048
 80015ac:	20000198 	.word	0x20000198

080015b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	/* TIM4 Update event = Overflow --> Ignition x */
	if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) != RESET)
 80015b4:	4b98      	ldr	r3, [pc, #608]	; (8001818 <TIM4_IRQHandler+0x268>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	f040 80d6 	bne.w	8001770 <TIM4_IRQHandler+0x1c0>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_UPDATE) != RESET)
 80015c4:	4b94      	ldr	r3, [pc, #592]	; (8001818 <TIM4_IRQHandler+0x268>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	f040 80ce 	bne.w	8001770 <TIM4_IRQHandler+0x1c0>
		{
			/* Ignite correct pin */

			switch(last_cylinder)
 80015d4:	4b91      	ldr	r3, [pc, #580]	; (800181c <TIM4_IRQHandler+0x26c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	f200 80ac 	bhi.w	8001738 <TIM4_IRQHandler+0x188>
 80015e0:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <TIM4_IRQHandler+0x38>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	0800164d 	.word	0x0800164d
 80015f0:	08001691 	.word	0x08001691
 80015f4:	080016d5 	.word	0x080016d5
			{
			case 0: /* Now ignite cylinder 4 */
				HAL_GPIO_WritePin(Zylinder24_Zuendung_GPIO_Port, Zylinder24_Zuendung_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2102      	movs	r1, #2
 80015fc:	4888      	ldr	r0, [pc, #544]	; (8001820 <TIM4_IRQHandler+0x270>)
 80015fe:	f001 fb29 	bl	8002c54 <HAL_GPIO_WritePin>
				last_cylinder = 1;
 8001602:	4b86      	ldr	r3, [pc, #536]	; (800181c <TIM4_IRQHandler+0x26c>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]

				/* Set compare for Compare Channel 1 (sets pin back to low after 5 ticks) */
				htim4.Instance->CCER &= ~TIM_CCER_CC1E; /* Disable channel 1 */
 8001608:	4b83      	ldr	r3, [pc, #524]	; (8001818 <TIM4_IRQHandler+0x268>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	4b82      	ldr	r3, [pc, #520]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	621a      	str	r2, [r3, #32]
				htim4.Instance->CCR1 = (uint16_t)(htim4.Instance->CNT) + 20; /* Update period */
 8001618:	4b7f      	ldr	r3, [pc, #508]	; (8001818 <TIM4_IRQHandler+0x268>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	b29b      	uxth	r3, r3
 8001620:	f103 0214 	add.w	r2, r3, #20
 8001624:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
				htim4.Instance->CCER |= TIM_CCER_CC1E; /* Enable channel 1 */
 800162a:	4b7b      	ldr	r3, [pc, #492]	; (8001818 <TIM4_IRQHandler+0x268>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6a1a      	ldr	r2, [r3, #32]
 8001630:	4b79      	ldr	r3, [pc, #484]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	621a      	str	r2, [r3, #32]

				__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800163a:	4b77      	ldr	r3, [pc, #476]	; (8001818 <TIM4_IRQHandler+0x268>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	4b75      	ldr	r3, [pc, #468]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0202 	orr.w	r2, r2, #2
 8001648:	60da      	str	r2, [r3, #12]

				break;
 800164a:	e086      	b.n	800175a <TIM4_IRQHandler+0x1aa>

			case 1: /* Now ignite cylinder 3 */
				HAL_GPIO_WritePin(Zylinder13_Zuendung_GPIO_Port, Zylinder13_Zuendung_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2101      	movs	r1, #1
 8001650:	4873      	ldr	r0, [pc, #460]	; (8001820 <TIM4_IRQHandler+0x270>)
 8001652:	f001 faff 	bl	8002c54 <HAL_GPIO_WritePin>
				last_cylinder = 2;
 8001656:	4b71      	ldr	r3, [pc, #452]	; (800181c <TIM4_IRQHandler+0x26c>)
 8001658:	2202      	movs	r2, #2
 800165a:	701a      	strb	r2, [r3, #0]

				/* Set compare for Compare Channel 1 (sets pin back to low after 5 ticks) */
				htim4.Instance->CCER &= ~TIM_CCER_CC1E; /* Disable channel 1 */
 800165c:	4b6e      	ldr	r3, [pc, #440]	; (8001818 <TIM4_IRQHandler+0x268>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a1a      	ldr	r2, [r3, #32]
 8001662:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	621a      	str	r2, [r3, #32]
				htim4.Instance->CCR1 = (uint16_t)(htim4.Instance->CNT) + 20; /* Update period */
 800166c:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <TIM4_IRQHandler+0x268>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	b29b      	uxth	r3, r3
 8001674:	f103 0214 	add.w	r2, r3, #20
 8001678:	4b67      	ldr	r3, [pc, #412]	; (8001818 <TIM4_IRQHandler+0x268>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
				htim4.Instance->CCER |= TIM_CCER_CC1E; /* Enable channel 1 */
 800167e:	4b66      	ldr	r3, [pc, #408]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6a1a      	ldr	r2, [r3, #32]
 8001684:	4b64      	ldr	r3, [pc, #400]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0201 	orr.w	r2, r2, #1
 800168c:	621a      	str	r2, [r3, #32]

				break;
 800168e:	e064      	b.n	800175a <TIM4_IRQHandler+0x1aa>

			case 2: /* Now ignite cylinder 2 */
				HAL_GPIO_WritePin(Zylinder24_Zuendung_GPIO_Port, Zylinder24_Zuendung_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	4862      	ldr	r0, [pc, #392]	; (8001820 <TIM4_IRQHandler+0x270>)
 8001696:	f001 fadd 	bl	8002c54 <HAL_GPIO_WritePin>
				last_cylinder = 3;
 800169a:	4b60      	ldr	r3, [pc, #384]	; (800181c <TIM4_IRQHandler+0x26c>)
 800169c:	2203      	movs	r2, #3
 800169e:	701a      	strb	r2, [r3, #0]

				/* Set compare for Compare Channel 1 (sets pin back to low after 5 ticks) */
				htim4.Instance->CCER &= ~TIM_CCER_CC1E; /* Disable channel 1 */
 80016a0:	4b5d      	ldr	r3, [pc, #372]	; (8001818 <TIM4_IRQHandler+0x268>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <TIM4_IRQHandler+0x268>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	621a      	str	r2, [r3, #32]
				htim4.Instance->CCR1 = (uint16_t)(htim4.Instance->CNT) + 20; /* Update period */
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <TIM4_IRQHandler+0x268>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f103 0214 	add.w	r2, r3, #20
 80016bc:	4b56      	ldr	r3, [pc, #344]	; (8001818 <TIM4_IRQHandler+0x268>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34
				htim4.Instance->CCER |= TIM_CCER_CC1E; /* Enable channel 1 */
 80016c2:	4b55      	ldr	r3, [pc, #340]	; (8001818 <TIM4_IRQHandler+0x268>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	4b53      	ldr	r3, [pc, #332]	; (8001818 <TIM4_IRQHandler+0x268>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0201 	orr.w	r2, r2, #1
 80016d0:	621a      	str	r2, [r3, #32]

				break;
 80016d2:	e042      	b.n	800175a <TIM4_IRQHandler+0x1aa>

			case 3: /* Now ignite cylinder 1 */
				HAL_GPIO_WritePin(Zylinder13_Zuendung_GPIO_Port, Zylinder13_Zuendung_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	4851      	ldr	r0, [pc, #324]	; (8001820 <TIM4_IRQHandler+0x270>)
 80016da:	f001 fabb 	bl	8002c54 <HAL_GPIO_WritePin>
				last_cylinder = 0;
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <TIM4_IRQHandler+0x26c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]

				/* Set compare for Compare Channel 1 (sets pin back to low after 5 ticks) */
				htim4.Instance->CCER &= ~TIM_CCER_CC1E; /* Disable channel 1 */
 80016e4:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <TIM4_IRQHandler+0x268>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4b4b      	ldr	r3, [pc, #300]	; (8001818 <TIM4_IRQHandler+0x268>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	621a      	str	r2, [r3, #32]
				htim4.Instance->CCR1 = (uint16_t)(htim4.Instance->CNT) + 20; /* Update period */
 80016f4:	4b48      	ldr	r3, [pc, #288]	; (8001818 <TIM4_IRQHandler+0x268>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f103 0214 	add.w	r2, r3, #20
 8001700:	4b45      	ldr	r3, [pc, #276]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
				htim4.Instance->CCER |= TIM_CCER_CC1E; /* Enable channel 1 */
 8001706:	4b44      	ldr	r3, [pc, #272]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	4b42      	ldr	r3, [pc, #264]	; (8001818 <TIM4_IRQHandler+0x268>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	621a      	str	r2, [r3, #32]


				/* Disable update flag to avoid another ignition until next OT enables TIM4 update event again */
				__HAL_TIM_URS_DISABLE(&htim4);
 8001716:	4b40      	ldr	r3, [pc, #256]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <TIM4_IRQHandler+0x268>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0204 	bic.w	r2, r2, #4
 8001724:	601a      	str	r2, [r3, #0]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <TIM4_IRQHandler+0x268>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	60da      	str	r2, [r3, #12]
				break;
 8001736:	e010      	b.n	800175a <TIM4_IRQHandler+0x1aa>

				/* Wrong value: Rather do nothing instead of doing something wrong */
			default:
				__HAL_TIM_URS_DISABLE(&htim4);
 8001738:	4b37      	ldr	r3, [pc, #220]	; (8001818 <TIM4_IRQHandler+0x268>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b36      	ldr	r3, [pc, #216]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0204 	bic.w	r2, r2, #4
 8001746:	601a      	str	r2, [r3, #0]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);
 8001748:	4b33      	ldr	r3, [pc, #204]	; (8001818 <TIM4_IRQHandler+0x268>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	4b32      	ldr	r3, [pc, #200]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	60da      	str	r2, [r3, #12]
				break;
 8001758:	bf00      	nop
			}

			/* Reset update flag */
			__HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 800175a:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <TIM4_IRQHandler+0x268>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f06f 0201 	mvn.w	r2, #1
 8001762:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f06f 0201 	mvn.w	r2, #1
 800176c:	611a      	str	r2, [r3, #16]

			/* Done with interrupt */
			goto end_timer4;
 800176e:	e04d      	b.n	800180c <TIM4_IRQHandler+0x25c>
		}
	}


	/* TIM4 Compare event = Set pin x back to low */
	if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_CC1) != RESET)
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b02      	cmp	r3, #2
 800177c:	d145      	bne.n	800180a <TIM4_IRQHandler+0x25a>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_CC1) != RESET)
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b02      	cmp	r3, #2
 800178a:	d13e      	bne.n	800180a <TIM4_IRQHandler+0x25a>
		{
			__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC1);
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <TIM4_IRQHandler+0x268>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f06f 0202 	mvn.w	r2, #2
 8001794:	611a      	str	r2, [r3, #16]

			/* Output compare event */
			if(!((htim4.Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U))
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <TIM4_IRQHandler+0x268>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d132      	bne.n	800180a <TIM4_IRQHandler+0x25a>
			{
				switch(last_cylinder)
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <TIM4_IRQHandler+0x26c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d822      	bhi.n	80017f4 <TIM4_IRQHandler+0x244>
 80017ae:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <TIM4_IRQHandler+0x204>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	080017e9 	.word	0x080017e9
 80017b8:	080017c5 	.word	0x080017c5
 80017bc:	080017d1 	.word	0x080017d1
 80017c0:	080017dd 	.word	0x080017dd
				{
				case 1: /* Cylinder 4 was ignited before */
					HAL_GPIO_WritePin(Zylinder24_Zuendung_GPIO_Port, Zylinder24_Zuendung_Pin, GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2102      	movs	r1, #2
 80017c8:	4815      	ldr	r0, [pc, #84]	; (8001820 <TIM4_IRQHandler+0x270>)
 80017ca:	f001 fa43 	bl	8002c54 <HAL_GPIO_WritePin>

//					HAL_ADC_Start_IT(&hadc2);

					break;
 80017ce:	e01d      	b.n	800180c <TIM4_IRQHandler+0x25c>

				case 2: /* Cylinder 3 was ignited before */
					HAL_GPIO_WritePin(Zylinder13_Zuendung_GPIO_Port, Zylinder13_Zuendung_Pin, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2101      	movs	r1, #1
 80017d4:	4812      	ldr	r0, [pc, #72]	; (8001820 <TIM4_IRQHandler+0x270>)
 80017d6:	f001 fa3d 	bl	8002c54 <HAL_GPIO_WritePin>
					break;
 80017da:	e017      	b.n	800180c <TIM4_IRQHandler+0x25c>

				case 3: /* Cylinder 2 was ignited before */
					HAL_GPIO_WritePin(Zylinder24_Zuendung_GPIO_Port, Zylinder24_Zuendung_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	2102      	movs	r1, #2
 80017e0:	480f      	ldr	r0, [pc, #60]	; (8001820 <TIM4_IRQHandler+0x270>)
 80017e2:	f001 fa37 	bl	8002c54 <HAL_GPIO_WritePin>
					break;
 80017e6:	e011      	b.n	800180c <TIM4_IRQHandler+0x25c>

				case 0: /* Cylinder 1 was ignited before */
					HAL_GPIO_WritePin(Zylinder13_Zuendung_GPIO_Port, Zylinder13_Zuendung_Pin, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2101      	movs	r1, #1
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <TIM4_IRQHandler+0x270>)
 80017ee:	f001 fa31 	bl	8002c54 <HAL_GPIO_WritePin>
					break;
 80017f2:	e00b      	b.n	800180c <TIM4_IRQHandler+0x25c>

					/* Wrong value: Rather set both pins to low instead of doing nothing */
				default:
					HAL_GPIO_WritePin(Zylinder13_Zuendung_GPIO_Port, Zylinder13_Zuendung_Pin, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2101      	movs	r1, #1
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <TIM4_IRQHandler+0x270>)
 80017fa:	f001 fa2b 	bl	8002c54 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Zylinder24_Zuendung_GPIO_Port, Zylinder24_Zuendung_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2102      	movs	r1, #2
 8001802:	4807      	ldr	r0, [pc, #28]	; (8001820 <TIM4_IRQHandler+0x270>)
 8001804:	f001 fa26 	bl	8002c54 <HAL_GPIO_WritePin>
					break;
 8001808:	e000      	b.n	800180c <TIM4_IRQHandler+0x25c>
			}
		}
	}


end_timer4:
 800180a:	bf00      	nop
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <TIM4_IRQHandler+0x268>)
 800180e:	f002 f86d 	bl	80038ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000158 	.word	0x20000158
 800181c:	2000004b 	.word	0x2000004b
 8001820:	40020800 	.word	0x40020800

08001824 <init_TIM4_stuff>:

/* USER CODE BEGIN 1 */

void init_TIM4_stuff() {
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	sConfigOC_TIM4_CH1.OCMode = TIM_OCMODE_TIMING;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <init_TIM4_stuff+0x28>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
	sConfigOC_TIM4_CH1.Pulse = 0;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <init_TIM4_stuff+0x28>)
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
	sConfigOC_TIM4_CH1.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <init_TIM4_stuff+0x28>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
	sConfigOC_TIM4_CH1.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <init_TIM4_stuff+0x28>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000004c 	.word	0x2000004c

08001850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <SystemInit+0x60>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <SystemInit+0x60>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <SystemInit+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <SystemInit+0x64>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <SystemInit+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <SystemInit+0x64>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <SystemInit+0x64>)
 800187c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <SystemInit+0x64>)
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <SystemInit+0x68>)
 800188a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <SystemInit+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <SystemInit+0x64>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <SystemInit+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SystemInit+0x60>)
 80018a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a4:	609a      	str	r2, [r3, #8]
#endif
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00
 80018b4:	40023800 	.word	0x40023800
 80018b8:	24003010 	.word	0x24003010

080018bc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0318 	add.w	r3, r7, #24
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018da:	463b      	mov	r3, r7
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80018e6:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <MX_TIM3_Init+0xf8>)
 80018e8:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <MX_TIM3_Init+0xfc>)
 80018ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 221;
 80018ec:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <MX_TIM3_Init+0xf8>)
 80018ee:	22dd      	movs	r2, #221	; 0xdd
 80018f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <MX_TIM3_Init+0xf8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018f8:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <MX_TIM3_Init+0xf8>)
 80018fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <MX_TIM3_Init+0xf8>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <MX_TIM3_Init+0xf8>)
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800190c:	4829      	ldr	r0, [pc, #164]	; (80019b4 <MX_TIM3_Init+0xf8>)
 800190e:	f001 fecb 	bl	80036a8 <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001918:	f7ff fc1c 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	4619      	mov	r1, r3
 8001928:	4822      	ldr	r0, [pc, #136]	; (80019b4 <MX_TIM3_Init+0xf8>)
 800192a:	f002 f9e3 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001934:	f7ff fc0e 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001938:	481e      	ldr	r0, [pc, #120]	; (80019b4 <MX_TIM3_Init+0xf8>)
 800193a:	f001 ff39 	bl	80037b0 <HAL_TIM_IC_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001944:	f7ff fc06 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4619      	mov	r1, r3
 8001956:	4817      	ldr	r0, [pc, #92]	; (80019b4 <MX_TIM3_Init+0xf8>)
 8001958:	f002 ff33 	bl	80047c2 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001962:	f7ff fbf7 	bl	8001154 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001966:	2300      	movs	r3, #0
 8001968:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800196a:	2301      	movs	r3, #1
 800196c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001976:	463b      	mov	r3, r7
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_TIM3_Init+0xf8>)
 800197e:	f002 f91d 	bl	8003bbc <HAL_TIM_IC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001988:	f7ff fbe4 	bl	8001154 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800198c:	2302      	movs	r3, #2
 800198e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001990:	2302      	movs	r3, #2
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	2204      	movs	r2, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <MX_TIM3_Init+0xf8>)
 800199c:	f002 f90e 	bl	8003bbc <HAL_TIM_IC_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80019a6:	f7ff fbd5 	bl	8001154 <Error_Handler>
  }

}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000198 	.word	0x20000198
 80019b8:	40000400 	.word	0x40000400

080019bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08e      	sub	sp, #56	; 0x38
 80019c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <MX_TIM4_Init+0xe0>)
 80019ee:	4a2c      	ldr	r2, [pc, #176]	; (8001aa0 <MX_TIM4_Init+0xe4>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 221;
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <MX_TIM4_Init+0xe0>)
 80019f4:	22dd      	movs	r2, #221	; 0xdd
 80019f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <MX_TIM4_Init+0xe0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 28500;
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <MX_TIM4_Init+0xe0>)
 8001a00:	f646 7254 	movw	r2, #28500	; 0x6f54
 8001a04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <MX_TIM4_Init+0xe0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <MX_TIM4_Init+0xe0>)
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a12:	4822      	ldr	r0, [pc, #136]	; (8001a9c <MX_TIM4_Init+0xe0>)
 8001a14:	f001 fe48 	bl	80036a8 <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a1e:	f7ff fb99 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481b      	ldr	r0, [pc, #108]	; (8001a9c <MX_TIM4_Init+0xe0>)
 8001a30:	f002 f960 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a3a:	f7ff fb8b 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001a3e:	4817      	ldr	r0, [pc, #92]	; (8001a9c <MX_TIM4_Init+0xe0>)
 8001a40:	f001 fe81 	bl	8003746 <HAL_TIM_OC_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a4a:	f7ff fb83 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a56:	f107 0320 	add.w	r3, r7, #32
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480f      	ldr	r0, [pc, #60]	; (8001a9c <MX_TIM4_Init+0xe0>)
 8001a5e:	f002 feb0 	bl	80047c2 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001a68:	f7ff fb74 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <MX_TIM4_Init+0xe0>)
 8001a84:	f002 f83a 	bl	8003afc <HAL_TIM_OC_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001a8e:	f7ff fb61 	bl	8001154 <Error_Handler>
  }

}
 8001a92:	bf00      	nop
 8001a94:	3738      	adds	r7, #56	; 0x38
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000158 	.word	0x20000158
 8001aa0:	40000800 	.word	0x40000800

08001aa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <HAL_TIM_Base_MspInit+0xcc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d134      	bne.n	8001b30 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_TIM_Base_MspInit+0xd0>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <HAL_TIM_Base_MspInit+0xd0>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_TIM_Base_MspInit+0xd0>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_TIM_Base_MspInit+0xd0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <HAL_TIM_Base_MspInit+0xd0>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_TIM_Base_MspInit+0xd0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001afe:	2340      	movs	r3, #64	; 0x40
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4817      	ldr	r0, [pc, #92]	; (8001b78 <HAL_TIM_Base_MspInit+0xd4>)
 8001b1a:	f000 ff09 	bl	8002930 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2101      	movs	r1, #1
 8001b22:	201d      	movs	r0, #29
 8001b24:	f000 fecd 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b28:	201d      	movs	r0, #29
 8001b2a:	f000 fee6 	bl	80028fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b2e:	e01a      	b.n	8001b66 <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM4)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <HAL_TIM_Base_MspInit+0xd8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d115      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_TIM_Base_MspInit+0xd0>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <HAL_TIM_Base_MspInit+0xd0>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_TIM_Base_MspInit+0xd0>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	201e      	movs	r0, #30
 8001b5c:	f000 feb1 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b60:	201e      	movs	r0, #30
 8001b62:	f000 feca 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40000800 	.word	0x40000800

08001b80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <MX_USART2_UART_Init+0x50>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001bb8:	f002 fe5c 	bl	8004874 <HAL_UART_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bc2:	f7ff fac7 	bl	8001154 <Error_Handler>
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200001d8 	.word	0x200001d8
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_UART_MspInit+0x84>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d12b      	bne.n	8001c4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_UART_MspInit+0x88>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_UART_MspInit+0x88>)
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_UART_MspInit+0x88>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_UART_MspInit+0x88>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <HAL_UART_MspInit+0x88>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_UART_MspInit+0x88>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c2e:	230c      	movs	r3, #12
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c3e:	2307      	movs	r3, #7
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <HAL_UART_MspInit+0x8c>)
 8001c4a:	f000 fe71 	bl	8002930 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	; 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40004400 	.word	0x40004400
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000

08001c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c6a:	e003      	b.n	8001c74 <LoopCopyDataInit>

08001c6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c72:	3104      	adds	r1, #4

08001c74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c7c:	d3f6      	bcc.n	8001c6c <CopyDataInit>
  ldr  r2, =_sbss
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c80:	e002      	b.n	8001c88 <LoopFillZerobss>

08001c82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c84:	f842 3b04 	str.w	r3, [r2], #4

08001c88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c8c:	d3f9      	bcc.n	8001c82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c8e:	f7ff fddf 	bl	8001850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f003 f847 	bl	8004d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c96:	f7ff f9c1 	bl	800101c <main>
  bx  lr    
 8001c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ca0:	080050d0 	.word	0x080050d0
  ldr  r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ca8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001cac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001cb0:	2000021c 	.word	0x2000021c

08001cb4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <CAN1_RX0_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_Init+0x40>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_Init+0x40>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x40>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 fde3 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f808 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff fa3a 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x54>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_InitTick+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fdfb 	bl	8002916 <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d38:	f000 fdc3 	bl	80028c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_InitTick+0x5c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	20000218 	.word	0x20000218

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000218 	.word	0x20000218

08001d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e033      	b.n	8001e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff f850 	bl	8000e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d118      	bne.n	8001e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001de2:	f023 0302 	bic.w	r3, r3, #2
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fb86 	bl	8002500 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0a:	e001      	b.n	8001e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_Start_IT+0x1a>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e0b0      	b.n	8001fa0 <HAL_ADC_Start_IT+0x17c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d018      	beq.n	8001e86 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e64:	4b51      	ldr	r3, [pc, #324]	; (8001fac <HAL_ADC_Start_IT+0x188>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a51      	ldr	r2, [pc, #324]	; (8001fb0 <HAL_ADC_Start_IT+0x18c>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0c9a      	lsrs	r2, r3, #18
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e78:	e002      	b.n	8001e80 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f040 8084 	bne.w	8001f9e <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ec0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed4:	d106      	bne.n	8001ee4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f023 0206 	bic.w	r2, r3, #6
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ee2:	e002      	b.n	8001eea <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ef2:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_ADC_Start_IT+0x190>)
 8001ef4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001efe:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f0e:	f043 0320 	orr.w	r3, r3, #32
 8001f12:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d12a      	bne.n	8001f76 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a24      	ldr	r2, [pc, #144]	; (8001fb8 <HAL_ADC_Start_IT+0x194>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d015      	beq.n	8001f56 <HAL_ADC_Start_IT+0x132>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_ADC_Start_IT+0x198>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_Start_IT+0x11c>
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_ADC_Start_IT+0x190>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <HAL_ADC_Start_IT+0x19c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d129      	bne.n	8001f9e <HAL_ADC_Start_IT+0x17a>
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_ADC_Start_IT+0x190>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	d823      	bhi.n	8001f9e <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d11c      	bne.n	8001f9e <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e013      	b.n	8001f9e <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <HAL_ADC_Start_IT+0x194>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10e      	bne.n	8001f9e <HAL_ADC_Start_IT+0x17a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f9c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	431bde83 	.word	0x431bde83
 8001fb4:	40012300 	.word	0x40012300
 8001fb8:	40012000 	.word	0x40012000
 8001fbc:	40012100 	.word	0x40012100
 8001fc0:	40012200 	.word	0x40012200

08001fc4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d049      	beq.n	800209a <HAL_ADC_IRQHandler+0xd6>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d046      	beq.n	800209a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d12b      	bne.n	800208a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	d127      	bne.n	800208a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002052:	2b00      	cmp	r3, #0
 8002054:	d119      	bne.n	800208a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0220 	bic.w	r2, r2, #32
 8002064:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8e8 	bl	8002260 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0212 	mvn.w	r2, #18
 8002098:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	2b80      	cmp	r3, #128	; 0x80
 80020bc:	bf0c      	ite	eq
 80020be:	2301      	moveq	r3, #1
 80020c0:	2300      	movne	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d057      	beq.n	800217c <HAL_ADC_IRQHandler+0x1b8>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d054      	beq.n	800217c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d139      	bne.n	800216c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002110:	2b00      	cmp	r3, #0
 8002112:	d12b      	bne.n	800216c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800211e:	2b00      	cmp	r3, #0
 8002120:	d124      	bne.n	800216c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11d      	bne.n	800216c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d119      	bne.n	800216c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002146:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fac3 	bl	80026f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f06f 020c 	mvn.w	r2, #12
 800217a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d017      	beq.n	80021de <HAL_ADC_IRQHandler+0x21a>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d014      	beq.n	80021de <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10d      	bne.n	80021de <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f850 	bl	8002274 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0201 	mvn.w	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d015      	beq.n	800223e <HAL_ADC_IRQHandler+0x27a>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d012      	beq.n	800223e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	f043 0202 	orr.w	r2, r3, #2
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0220 	mvn.w	r2, #32
 800222c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f82a 	bl	8002288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0220 	mvn.w	r2, #32
 800223c:	601a      	str	r2, [r3, #0]
  }
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1c>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e113      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x244>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d925      	bls.n	8002314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	3b1e      	subs	r3, #30
 80022de:	2207      	movs	r2, #7
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43da      	mvns	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	400a      	ands	r2, r1
 80022ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68d9      	ldr	r1, [r3, #12]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	4603      	mov	r3, r0
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4403      	add	r3, r0
 8002306:	3b1e      	subs	r3, #30
 8002308:	409a      	lsls	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	e022      	b.n	800235a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6919      	ldr	r1, [r3, #16]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	2207      	movs	r2, #7
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	4603      	mov	r3, r0
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4403      	add	r3, r0
 8002350:	409a      	lsls	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b06      	cmp	r3, #6
 8002360:	d824      	bhi.n	80023ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	3b05      	subs	r3, #5
 8002374:	221f      	movs	r2, #31
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	400a      	ands	r2, r1
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	3b05      	subs	r3, #5
 800239e:	fa00 f203 	lsl.w	r2, r0, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	635a      	str	r2, [r3, #52]	; 0x34
 80023aa:	e04c      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	d824      	bhi.n	80023fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b23      	subs	r3, #35	; 0x23
 80023c6:	221f      	movs	r2, #31
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	3b23      	subs	r3, #35	; 0x23
 80023f0:	fa00 f203 	lsl.w	r2, r0, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
 80023fc:	e023      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b41      	subs	r3, #65	; 0x41
 8002410:	221f      	movs	r2, #31
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b41      	subs	r3, #65	; 0x41
 800243a:	fa00 f203 	lsl.w	r2, r0, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002446:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_ADC_ConfigChannel+0x250>)
 8002448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <HAL_ADC_ConfigChannel+0x254>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d10f      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1d8>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <HAL_ADC_ConfigChannel+0x254>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12b      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x23a>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_ADC_ConfigChannel+0x258>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x1f4>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b11      	cmp	r3, #17
 800248e:	d122      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_ADC_ConfigChannel+0x258>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_ADC_ConfigChannel+0x25c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_ADC_ConfigChannel+0x260>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	0c9a      	lsrs	r2, r3, #18
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f9      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40012300 	.word	0x40012300
 80024f0:	40012000 	.word	0x40012000
 80024f4:	10000012 	.word	0x10000012
 80024f8:	20000000 	.word	0x20000000
 80024fc:	431bde83 	.word	0x431bde83

08002500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002508:	4b79      	ldr	r3, [pc, #484]	; (80026f0 <ADC_Init+0x1f0>)
 800250a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	021a      	lsls	r2, r3, #8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <ADC_Init+0x1f4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d022      	beq.n	80025de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6899      	ldr	r1, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	e00f      	b.n	80025fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0202 	bic.w	r2, r2, #2
 800260c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6899      	ldr	r1, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7e1b      	ldrb	r3, [r3, #24]
 8002618:	005a      	lsls	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01b      	beq.n	8002664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800263a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800264a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	3b01      	subs	r3, #1
 8002658:	035a      	lsls	r2, r3, #13
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	e007      	b.n	8002674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002672:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	3b01      	subs	r3, #1
 8002690:	051a      	lsls	r2, r3, #20
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026b6:	025a      	lsls	r2, r3, #9
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	029a      	lsls	r2, r3, #10
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40012300 	.word	0x40012300
 80026f4:	0f000001 	.word	0x0f000001

080026f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <__NVIC_EnableIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d301      	bcc.n	800287e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287a:	2301      	movs	r3, #1
 800287c:	e00f      	b.n	800289e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <SysTick_Config+0x40>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002886:	210f      	movs	r1, #15
 8002888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800288c:	f7ff ff8e 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <SysTick_Config+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <SysTick_Config+0x40>)
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000e010 	.word	0xe000e010

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff29 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d4:	f7ff ff3e 	bl	8002754 <__NVIC_GetPriorityGrouping>
 80028d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7ff ff8e 	bl	8002800 <NVIC_EncodePriority>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff5d 	bl	80027ac <__NVIC_SetPriority>
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff31 	bl	8002770 <__NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffa2 	bl	8002868 <SysTick_Config>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e165      	b.n	8002c18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8154 	bne.w	8002c12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x4a>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b12      	cmp	r3, #18
 8002978:	d123      	bne.n	80029c2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	08da      	lsrs	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	08da      	lsrs	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3208      	adds	r2, #8
 80029bc:	69b9      	ldr	r1, [r7, #24]
 80029be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0203 	and.w	r2, r3, #3
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d00b      	beq.n	8002a16 <HAL_GPIO_Init+0xe6>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d007      	beq.n	8002a16 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a0a:	2b11      	cmp	r3, #17
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b12      	cmp	r3, #18
 8002a14:	d130      	bne.n	8002a78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 0201 	and.w	r2, r3, #1
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80ae 	beq.w	8002c12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b5c      	ldr	r3, [pc, #368]	; (8002c2c <HAL_GPIO_Init+0x2fc>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a5b      	ldr	r2, [pc, #364]	; (8002c2c <HAL_GPIO_Init+0x2fc>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_GPIO_Init+0x2fc>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad2:	4a57      	ldr	r2, [pc, #348]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4e      	ldr	r2, [pc, #312]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d025      	beq.n	8002b4a <HAL_GPIO_Init+0x21a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4d      	ldr	r2, [pc, #308]	; (8002c38 <HAL_GPIO_Init+0x308>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01f      	beq.n	8002b46 <HAL_GPIO_Init+0x216>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4c      	ldr	r2, [pc, #304]	; (8002c3c <HAL_GPIO_Init+0x30c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d019      	beq.n	8002b42 <HAL_GPIO_Init+0x212>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4b      	ldr	r2, [pc, #300]	; (8002c40 <HAL_GPIO_Init+0x310>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_GPIO_Init+0x20e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4a      	ldr	r2, [pc, #296]	; (8002c44 <HAL_GPIO_Init+0x314>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00d      	beq.n	8002b3a <HAL_GPIO_Init+0x20a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a49      	ldr	r2, [pc, #292]	; (8002c48 <HAL_GPIO_Init+0x318>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x206>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a48      	ldr	r2, [pc, #288]	; (8002c4c <HAL_GPIO_Init+0x31c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_GPIO_Init+0x202>
 8002b2e:	2306      	movs	r3, #6
 8002b30:	e00c      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e00a      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b36:	2305      	movs	r3, #5
 8002b38:	e008      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	e006      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e004      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e002      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	f002 0203 	and.w	r2, r2, #3
 8002b52:	0092      	lsls	r2, r2, #2
 8002b54:	4093      	lsls	r3, r2
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b5c:	4934      	ldr	r1, [pc, #208]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	3302      	adds	r3, #2
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b6a:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b8e:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b94:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb8:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be2:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c0c:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b0f      	cmp	r3, #15
 8002c1c:	f67f ae96 	bls.w	800294c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c20:	bf00      	nop
 8002c22:	3724      	adds	r7, #36	; 0x24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40013800 	.word	0x40013800
 8002c34:	40020000 	.word	0x40020000
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40021400 	.word	0x40021400
 8002c4c:	40021800 	.word	0x40021800
 8002c50:	40013c00 	.word	0x40013c00

08002c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
 8002c60:	4613      	mov	r3, r2
 8002c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c64:	787b      	ldrb	r3, [r7, #1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c70:	e003      	b.n	8002c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c72:	887b      	ldrh	r3, [r7, #2]
 8002c74:	041a      	lsls	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	619a      	str	r2, [r3, #24]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0ca      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b67      	ldr	r3, [pc, #412]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d90c      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b64      	ldr	r3, [pc, #400]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b62      	ldr	r3, [pc, #392]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b6      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a57      	ldr	r2, [pc, #348]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b52      	ldr	r3, [pc, #328]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a51      	ldr	r2, [pc, #324]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494c      	ldr	r1, [pc, #304]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d044      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d119      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07d      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06d      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e065      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4933      	ldr	r1, [pc, #204]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7ff f804 	bl	8001d84 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7ff f800 	bl	8001d84 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e04d      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 020c 	and.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1eb      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d20c      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e030      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4915      	ldr	r1, [pc, #84]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490d      	ldr	r1, [pc, #52]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f851 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e12:	4601      	mov	r1, r0
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	4a09      	ldr	r2, [pc, #36]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	5cd3      	ldrb	r3, [r2, r3]
 8002e22:	fa21 f303 	lsr.w	r3, r1, r3
 8002e26:	4a08      	ldr	r2, [pc, #32]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fe ff66 	bl	8001cfc <HAL_InitTick>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	080050a8 	.word	0x080050a8
 8002e48:	20000000 	.word	0x20000000

08002e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000000 	.word	0x20000000

08002e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e68:	f7ff fff0 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e6c:	4601      	mov	r1, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0a9b      	lsrs	r3, r3, #10
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	080050b8 	.word	0x080050b8

08002e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e90:	f7ff ffdc 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e94:	4601      	mov	r1, r0
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	0b5b      	lsrs	r3, r3, #13
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea2:	5cd3      	ldrb	r3, [r2, r3]
 8002ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	080050b8 	.word	0x080050b8

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ece:	4bc6      	ldr	r3, [pc, #792]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	f200 817e 	bhi.w	80031d8 <HAL_RCC_GetSysClockFreq+0x324>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_RCC_GetSysClockFreq+0x30>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	080031d9 	.word	0x080031d9
 8002eec:	080031d9 	.word	0x080031d9
 8002ef0:	080031d9 	.word	0x080031d9
 8002ef4:	08002f1f 	.word	0x08002f1f
 8002ef8:	080031d9 	.word	0x080031d9
 8002efc:	080031d9 	.word	0x080031d9
 8002f00:	080031d9 	.word	0x080031d9
 8002f04:	08002f25 	.word	0x08002f25
 8002f08:	080031d9 	.word	0x080031d9
 8002f0c:	080031d9 	.word	0x080031d9
 8002f10:	080031d9 	.word	0x080031d9
 8002f14:	08003081 	.word	0x08003081
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4bb4      	ldr	r3, [pc, #720]	; (80031ec <HAL_RCC_GetSysClockFreq+0x338>)
 8002f1a:	613b      	str	r3, [r7, #16]
       break;
 8002f1c:	e15f      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1e:	4bb4      	ldr	r3, [pc, #720]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002f20:	613b      	str	r3, [r7, #16]
      break;
 8002f22:	e15c      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f24:	4bb0      	ldr	r3, [pc, #704]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f2c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2e:	4bae      	ldr	r3, [pc, #696]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d04a      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4bab      	ldr	r3, [pc, #684]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	f04f 0400 	mov.w	r4, #0
 8002f44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	ea03 0501 	and.w	r5, r3, r1
 8002f50:	ea04 0602 	and.w	r6, r4, r2
 8002f54:	4629      	mov	r1, r5
 8002f56:	4632      	mov	r2, r6
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	0154      	lsls	r4, r2, #5
 8002f62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f66:	014b      	lsls	r3, r1, #5
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	1b49      	subs	r1, r1, r5
 8002f6e:	eb62 0206 	sbc.w	r2, r2, r6
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	f04f 0400 	mov.w	r4, #0
 8002f7a:	0194      	lsls	r4, r2, #6
 8002f7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f80:	018b      	lsls	r3, r1, #6
 8002f82:	1a5b      	subs	r3, r3, r1
 8002f84:	eb64 0402 	sbc.w	r4, r4, r2
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	00e2      	lsls	r2, r4, #3
 8002f92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f96:	00d9      	lsls	r1, r3, #3
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	195b      	adds	r3, r3, r5
 8002f9e:	eb44 0406 	adc.w	r4, r4, r6
 8002fa2:	f04f 0100 	mov.w	r1, #0
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	0262      	lsls	r2, r4, #9
 8002fac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002fb0:	0259      	lsls	r1, r3, #9
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	4621      	mov	r1, r4
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f04f 0400 	mov.w	r4, #0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	f7fd fafa 	bl	80005bc <__aeabi_uldivmod>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e049      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd0:	4b85      	ldr	r3, [pc, #532]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	f04f 0400 	mov.w	r4, #0
 8002fda:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	ea03 0501 	and.w	r5, r3, r1
 8002fe6:	ea04 0602 	and.w	r6, r4, r2
 8002fea:	4629      	mov	r1, r5
 8002fec:	4632      	mov	r2, r6
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	f04f 0400 	mov.w	r4, #0
 8002ff6:	0154      	lsls	r4, r2, #5
 8002ff8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ffc:	014b      	lsls	r3, r1, #5
 8002ffe:	4619      	mov	r1, r3
 8003000:	4622      	mov	r2, r4
 8003002:	1b49      	subs	r1, r1, r5
 8003004:	eb62 0206 	sbc.w	r2, r2, r6
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	f04f 0400 	mov.w	r4, #0
 8003010:	0194      	lsls	r4, r2, #6
 8003012:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003016:	018b      	lsls	r3, r1, #6
 8003018:	1a5b      	subs	r3, r3, r1
 800301a:	eb64 0402 	sbc.w	r4, r4, r2
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	00e2      	lsls	r2, r4, #3
 8003028:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800302c:	00d9      	lsls	r1, r3, #3
 800302e:	460b      	mov	r3, r1
 8003030:	4614      	mov	r4, r2
 8003032:	195b      	adds	r3, r3, r5
 8003034:	eb44 0406 	adc.w	r4, r4, r6
 8003038:	f04f 0100 	mov.w	r1, #0
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	02a2      	lsls	r2, r4, #10
 8003042:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003046:	0299      	lsls	r1, r3, #10
 8003048:	460b      	mov	r3, r1
 800304a:	4614      	mov	r4, r2
 800304c:	4618      	mov	r0, r3
 800304e:	4621      	mov	r1, r4
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f04f 0400 	mov.w	r4, #0
 8003056:	461a      	mov	r2, r3
 8003058:	4623      	mov	r3, r4
 800305a:	f7fd faaf 	bl	80005bc <__aeabi_uldivmod>
 800305e:	4603      	mov	r3, r0
 8003060:	460c      	mov	r4, r1
 8003062:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003064:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	3301      	adds	r3, #1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	613b      	str	r3, [r7, #16]
      break;
 800307e:	e0ae      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003088:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800308a:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d04a      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003096:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	f04f 0400 	mov.w	r4, #0
 80030a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	ea03 0501 	and.w	r5, r3, r1
 80030ac:	ea04 0602 	and.w	r6, r4, r2
 80030b0:	4629      	mov	r1, r5
 80030b2:	4632      	mov	r2, r6
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	0154      	lsls	r4, r2, #5
 80030be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030c2:	014b      	lsls	r3, r1, #5
 80030c4:	4619      	mov	r1, r3
 80030c6:	4622      	mov	r2, r4
 80030c8:	1b49      	subs	r1, r1, r5
 80030ca:	eb62 0206 	sbc.w	r2, r2, r6
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f04f 0400 	mov.w	r4, #0
 80030d6:	0194      	lsls	r4, r2, #6
 80030d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030dc:	018b      	lsls	r3, r1, #6
 80030de:	1a5b      	subs	r3, r3, r1
 80030e0:	eb64 0402 	sbc.w	r4, r4, r2
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	00e2      	lsls	r2, r4, #3
 80030ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030f2:	00d9      	lsls	r1, r3, #3
 80030f4:	460b      	mov	r3, r1
 80030f6:	4614      	mov	r4, r2
 80030f8:	195b      	adds	r3, r3, r5
 80030fa:	eb44 0406 	adc.w	r4, r4, r6
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	0262      	lsls	r2, r4, #9
 8003108:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800310c:	0259      	lsls	r1, r3, #9
 800310e:	460b      	mov	r3, r1
 8003110:	4614      	mov	r4, r2
 8003112:	4618      	mov	r0, r3
 8003114:	4621      	mov	r1, r4
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f04f 0400 	mov.w	r4, #0
 800311c:	461a      	mov	r2, r3
 800311e:	4623      	mov	r3, r4
 8003120:	f7fd fa4c 	bl	80005bc <__aeabi_uldivmod>
 8003124:	4603      	mov	r3, r0
 8003126:	460c      	mov	r4, r1
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	e049      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312c:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	f04f 0400 	mov.w	r4, #0
 8003136:	f240 11ff 	movw	r1, #511	; 0x1ff
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	ea03 0501 	and.w	r5, r3, r1
 8003142:	ea04 0602 	and.w	r6, r4, r2
 8003146:	4629      	mov	r1, r5
 8003148:	4632      	mov	r2, r6
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	f04f 0400 	mov.w	r4, #0
 8003152:	0154      	lsls	r4, r2, #5
 8003154:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003158:	014b      	lsls	r3, r1, #5
 800315a:	4619      	mov	r1, r3
 800315c:	4622      	mov	r2, r4
 800315e:	1b49      	subs	r1, r1, r5
 8003160:	eb62 0206 	sbc.w	r2, r2, r6
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	f04f 0400 	mov.w	r4, #0
 800316c:	0194      	lsls	r4, r2, #6
 800316e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003172:	018b      	lsls	r3, r1, #6
 8003174:	1a5b      	subs	r3, r3, r1
 8003176:	eb64 0402 	sbc.w	r4, r4, r2
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	00e2      	lsls	r2, r4, #3
 8003184:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003188:	00d9      	lsls	r1, r3, #3
 800318a:	460b      	mov	r3, r1
 800318c:	4614      	mov	r4, r2
 800318e:	195b      	adds	r3, r3, r5
 8003190:	eb44 0406 	adc.w	r4, r4, r6
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	02a2      	lsls	r2, r4, #10
 800319e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031a2:	0299      	lsls	r1, r3, #10
 80031a4:	460b      	mov	r3, r1
 80031a6:	4614      	mov	r4, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	4621      	mov	r1, r4
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f04f 0400 	mov.w	r4, #0
 80031b2:	461a      	mov	r2, r3
 80031b4:	4623      	mov	r3, r4
 80031b6:	f7fd fa01 	bl	80005bc <__aeabi_uldivmod>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x334>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	0f1b      	lsrs	r3, r3, #28
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	613b      	str	r3, [r7, #16]
      break;
 80031d6:	e002      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <HAL_RCC_GetSysClockFreq+0x338>)
 80031da:	613b      	str	r3, [r7, #16]
      break;
 80031dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031de:	693b      	ldr	r3, [r7, #16]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	007a1200 	.word	0x007a1200

080031f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8083 	beq.w	8003314 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800320e:	4b95      	ldr	r3, [pc, #596]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b04      	cmp	r3, #4
 8003218:	d019      	beq.n	800324e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800321a:	4b92      	ldr	r3, [pc, #584]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003222:	2b08      	cmp	r3, #8
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003226:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003232:	d00c      	beq.n	800324e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003234:	4b8b      	ldr	r3, [pc, #556]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d112      	bne.n	8003266 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003240:	4b88      	ldr	r3, [pc, #544]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324c:	d10b      	bne.n	8003266 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324e:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d05b      	beq.n	8003312 <HAL_RCC_OscConfig+0x11e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d157      	bne.n	8003312 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e216      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x8a>
 8003270:	4b7c      	ldr	r3, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7b      	ldr	r2, [pc, #492]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e01d      	b.n	80032ba <HAL_RCC_OscConfig+0xc6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003286:	d10c      	bne.n	80032a2 <HAL_RCC_OscConfig+0xae>
 8003288:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a75      	ldr	r2, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800328e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b73      	ldr	r3, [pc, #460]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a72      	ldr	r2, [pc, #456]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e00b      	b.n	80032ba <HAL_RCC_OscConfig+0xc6>
 80032a2:	4b70      	ldr	r3, [pc, #448]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6f      	ldr	r2, [pc, #444]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b6d      	ldr	r3, [pc, #436]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6c      	ldr	r2, [pc, #432]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d013      	beq.n	80032ea <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fe fd5f 	bl	8001d84 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ca:	f7fe fd5b 	bl	8001d84 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1db      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032dc:	4b61      	ldr	r3, [pc, #388]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0xd6>
 80032e8:	e014      	b.n	8003314 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe fd4b 	bl	8001d84 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f2:	f7fe fd47 	bl	8001d84 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	; 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1c7      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003304:	4b57      	ldr	r3, [pc, #348]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0xfe>
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003312:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d06f      	beq.n	8003400 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b00      	cmp	r3, #0
 800332a:	d017      	beq.n	800335c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800332c:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003334:	2b08      	cmp	r3, #8
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003338:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003344:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d11c      	bne.n	800338a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003350:	4b44      	ldr	r3, [pc, #272]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335c:	4b41      	ldr	r3, [pc, #260]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_OscConfig+0x180>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e18f      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4938      	ldr	r1, [pc, #224]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003388:	e03a      	b.n	8003400 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003392:	4b35      	ldr	r3, [pc, #212]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe fcf4 	bl	8001d84 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fe fcf0 	bl	8001d84 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e170      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b2:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4925      	ldr	r1, [pc, #148]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
 80033d2:	e015      	b.n	8003400 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe fcd3 	bl	8001d84 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fe fccf 	bl	8001d84 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e14f      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d037      	beq.n	800347c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d016      	beq.n	8003442 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_RCC_OscConfig+0x278>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fe fcb3 	bl	8001d84 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003422:	f7fe fcaf 	bl	8001d84 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e12f      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x22e>
 8003440:	e01c      	b.n	800347c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_OscConfig+0x278>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fe fc9c 	bl	8001d84 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344e:	e00f      	b.n	8003470 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003450:	f7fe fc98 	bl	8001d84 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d908      	bls.n	8003470 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e118      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	42470000 	.word	0x42470000
 800346c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003470:	4b8a      	ldr	r3, [pc, #552]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e9      	bne.n	8003450 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8097 	beq.w	80035b8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4b83      	ldr	r3, [pc, #524]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10f      	bne.n	80034ba <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b7f      	ldr	r3, [pc, #508]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	4a7e      	ldr	r2, [pc, #504]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a8:	6413      	str	r3, [r2, #64]	; 0x40
 80034aa:	4b7c      	ldr	r3, [pc, #496]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ba:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d118      	bne.n	80034f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a75      	ldr	r2, [pc, #468]	; (80036a0 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d2:	f7fe fc57 	bl	8001d84 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fe fc53 	bl	8001d84 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0d3      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	4b6c      	ldr	r3, [pc, #432]	; (80036a0 <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x31a>
 8003500:	4b66      	ldr	r3, [pc, #408]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a65      	ldr	r2, [pc, #404]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
 800350c:	e01c      	b.n	8003548 <HAL_RCC_OscConfig+0x354>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b05      	cmp	r3, #5
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x33c>
 8003516:	4b61      	ldr	r3, [pc, #388]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a60      	ldr	r2, [pc, #384]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
 8003522:	4b5e      	ldr	r3, [pc, #376]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a5d      	ldr	r2, [pc, #372]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0x354>
 8003530:	4b5a      	ldr	r3, [pc, #360]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	4a59      	ldr	r2, [pc, #356]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	6713      	str	r3, [r2, #112]	; 0x70
 800353c:	4b57      	ldr	r3, [pc, #348]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	4a56      	ldr	r2, [pc, #344]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003542:	f023 0304 	bic.w	r3, r3, #4
 8003546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d015      	beq.n	800357c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe fc18 	bl	8001d84 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fe fc14 	bl	8001d84 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e092      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356e:	4b4b      	ldr	r3, [pc, #300]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0ee      	beq.n	8003558 <HAL_RCC_OscConfig+0x364>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe fc02 	bl	8001d84 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fe fbfe 	bl	8001d84 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e07c      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359a:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ee      	bne.n	8003584 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ac:	4b3b      	ldr	r3, [pc, #236]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	4a3a      	ldr	r2, [pc, #232]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d068      	beq.n	8003692 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c0:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d060      	beq.n	800368e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d145      	bne.n	8003660 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <HAL_RCC_OscConfig+0x4b0>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fe fbd3 	bl	8001d84 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fe fbcf 	bl	8001d84 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e04f      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f4:	4b29      	ldr	r3, [pc, #164]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	019b      	lsls	r3, r3, #6
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	3b01      	subs	r3, #1
 800361a:	041b      	lsls	r3, r3, #16
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	061b      	lsls	r3, r3, #24
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	071b      	lsls	r3, r3, #28
 800362c:	491b      	ldr	r1, [pc, #108]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <HAL_RCC_OscConfig+0x4b0>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fba4 	bl	8001d84 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe fba0 	bl	8001d84 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e020      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x44c>
 800365e:	e018      	b.n	8003692 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_RCC_OscConfig+0x4b0>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fe fb8d 	bl	8001d84 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe fb89 	bl	8001d84 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e009      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x47a>
 800368c:	e001      	b.n	8003692 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	40007000 	.word	0x40007000
 80036a4:	42470060 	.word	0x42470060

080036a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e01d      	b.n	80036f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe f9e8 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f000 fc32 	bl	8003f50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b06      	cmp	r3, #6
 8003726:	d007      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e01d      	b.n	8003794 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f815 	bl	800379c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	4619      	mov	r1, r3
 8003784:	4610      	mov	r0, r2
 8003786:	f000 fbe3 	bl	8003f50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e01d      	b.n	80037fe <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f815 	bl	8003806 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f000 fbae 	bl	8003f50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d841      	bhi.n	80038b0 <HAL_TIM_IC_Start_IT+0x94>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_TIM_IC_Start_IT+0x18>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003869 	.word	0x08003869
 8003838:	080038b1 	.word	0x080038b1
 800383c:	080038b1 	.word	0x080038b1
 8003840:	080038b1 	.word	0x080038b1
 8003844:	0800387b 	.word	0x0800387b
 8003848:	080038b1 	.word	0x080038b1
 800384c:	080038b1 	.word	0x080038b1
 8003850:	080038b1 	.word	0x080038b1
 8003854:	0800388d 	.word	0x0800388d
 8003858:	080038b1 	.word	0x080038b1
 800385c:	080038b1 	.word	0x080038b1
 8003860:	080038b1 	.word	0x080038b1
 8003864:	0800389f 	.word	0x0800389f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0202 	orr.w	r2, r2, #2
 8003876:	60da      	str	r2, [r3, #12]
      break;
 8003878:	e01b      	b.n	80038b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0204 	orr.w	r2, r2, #4
 8003888:	60da      	str	r2, [r3, #12]
      break;
 800388a:	e012      	b.n	80038b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0208 	orr.w	r2, r2, #8
 800389a:	60da      	str	r2, [r3, #12]
      break;
 800389c:	e009      	b.n	80038b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0210 	orr.w	r2, r2, #16
 80038ac:	60da      	str	r2, [r3, #12]
      break;
 80038ae:	e000      	b.n	80038b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80038b0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2201      	movs	r2, #1
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 ff5c 	bl	8004778 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d007      	beq.n	80038e2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d122      	bne.n	8003948 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b02      	cmp	r3, #2
 800390e:	d11b      	bne.n	8003948 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0202 	mvn.w	r2, #2
 8003918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 faf0 	bl	8003f14 <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fae2 	bl	8003f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 faf3 	bl	8003f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d122      	bne.n	800399c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b04      	cmp	r3, #4
 8003962:	d11b      	bne.n	800399c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0204 	mvn.w	r2, #4
 800396c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fac6 	bl	8003f14 <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fab8 	bl	8003f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fac9 	bl	8003f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d122      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d11b      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0208 	mvn.w	r2, #8
 80039c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2204      	movs	r2, #4
 80039c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa9c 	bl	8003f14 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fa8e 	bl	8003f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fa9f 	bl	8003f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b10      	cmp	r3, #16
 80039fc:	d122      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d11b      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0210 	mvn.w	r2, #16
 8003a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2208      	movs	r2, #8
 8003a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa72 	bl	8003f14 <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa64 	bl	8003f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fa75 	bl	8003f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d10e      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d107      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0201 	mvn.w	r2, #1
 8003a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa3e 	bl	8003eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	2b80      	cmp	r3, #128	; 0x80
 8003a7c:	d10e      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a88:	2b80      	cmp	r3, #128	; 0x80
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fee2 	bl	8004860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b40      	cmp	r3, #64	; 0x40
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d107      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa3a 	bl	8003f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d10e      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d107      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0220 	mvn.w	r2, #32
 8003aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 feac 	bl	800484c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e04e      	b.n	8003bb4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b0c      	cmp	r3, #12
 8003b2a:	d839      	bhi.n	8003ba0 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <HAL_TIM_OC_ConfigChannel+0x38>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b69 	.word	0x08003b69
 8003b38:	08003ba1 	.word	0x08003ba1
 8003b3c:	08003ba1 	.word	0x08003ba1
 8003b40:	08003ba1 	.word	0x08003ba1
 8003b44:	08003b77 	.word	0x08003b77
 8003b48:	08003ba1 	.word	0x08003ba1
 8003b4c:	08003ba1 	.word	0x08003ba1
 8003b50:	08003ba1 	.word	0x08003ba1
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003ba1 	.word	0x08003ba1
 8003b5c:	08003ba1 	.word	0x08003ba1
 8003b60:	08003ba1 	.word	0x08003ba1
 8003b64:	08003b93 	.word	0x08003b93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fa8e 	bl	8004090 <TIM_OC1_SetConfig>
      break;
 8003b74:	e015      	b.n	8003ba2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 faf7 	bl	8004170 <TIM_OC2_SetConfig>
      break;
 8003b82:	e00e      	b.n	8003ba2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fb66 	bl	800425c <TIM_OC3_SetConfig>
      break;
 8003b90:	e007      	b.n	8003ba2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fbd3 	bl	8004344 <TIM_OC4_SetConfig>
      break;
 8003b9e:	e000      	b.n	8003ba2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003ba0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e08a      	b.n	8003cec <HAL_TIM_IC_ConfigChannel+0x130>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d11b      	bne.n	8003c24 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f000 fbf8 	bl	80043f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 020c 	bic.w	r2, r2, #12
 8003c0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6999      	ldr	r1, [r3, #24]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	619a      	str	r2, [r3, #24]
 8003c22:	e05a      	b.n	8003cda <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d11c      	bne.n	8003c64 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f000 fc7c 	bl	8004536 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6999      	ldr	r1, [r3, #24]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	021a      	lsls	r2, r3, #8
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	619a      	str	r2, [r3, #24]
 8003c62:	e03a      	b.n	8003cda <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d11b      	bne.n	8003ca2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	6819      	ldr	r1, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f000 fcc9 	bl	8004610 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 020c 	bic.w	r2, r2, #12
 8003c8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69d9      	ldr	r1, [r3, #28]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	61da      	str	r2, [r3, #28]
 8003ca0:	e01b      	b.n	8003cda <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f000 fce9 	bl	8004688 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cc4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69d9      	ldr	r1, [r3, #28]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	021a      	lsls	r2, r3, #8
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIM_ConfigClockSource+0x18>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e0a6      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x166>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d067      	beq.n	8003e14 <HAL_TIM_ConfigClockSource+0x120>
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d80b      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x6c>
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d073      	beq.n	8003e34 <HAL_TIM_ConfigClockSource+0x140>
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d802      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x62>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d06f      	beq.n	8003e34 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d54:	e078      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d06c      	beq.n	8003e34 <HAL_TIM_ConfigClockSource+0x140>
 8003d5a:	2b30      	cmp	r3, #48	; 0x30
 8003d5c:	d06a      	beq.n	8003e34 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d5e:	e073      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d60:	2b70      	cmp	r3, #112	; 0x70
 8003d62:	d00d      	beq.n	8003d80 <HAL_TIM_ConfigClockSource+0x8c>
 8003d64:	2b70      	cmp	r3, #112	; 0x70
 8003d66:	d804      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x7e>
 8003d68:	2b50      	cmp	r3, #80	; 0x50
 8003d6a:	d033      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0xe0>
 8003d6c:	2b60      	cmp	r3, #96	; 0x60
 8003d6e:	d041      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d70:	e06a      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d066      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x152>
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7c:	d017      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d7e:	e063      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6899      	ldr	r1, [r3, #8]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f000 fcd2 	bl	8004738 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003da2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	609a      	str	r2, [r3, #8]
      break;
 8003dac:	e04c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f000 fcbb 	bl	8004738 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd0:	609a      	str	r2, [r3, #8]
      break;
 8003dd2:	e039      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	461a      	mov	r2, r3
 8003de2:	f000 fb79 	bl	80044d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2150      	movs	r1, #80	; 0x50
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fc88 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 8003df2:	e029      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f000 fbd5 	bl	80045b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2160      	movs	r1, #96	; 0x60
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fc78 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 8003e12:	e019      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	461a      	mov	r2, r3
 8003e22:	f000 fb59 	bl	80044d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2140      	movs	r1, #64	; 0x40
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fc68 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 8003e32:	e009      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f000 fc5f 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 8003e44:	e000      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b0c      	cmp	r3, #12
 8003e76:	d831      	bhi.n	8003edc <HAL_TIM_ReadCapturedValue+0x78>
 8003e78:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003eb5 	.word	0x08003eb5
 8003e84:	08003edd 	.word	0x08003edd
 8003e88:	08003edd 	.word	0x08003edd
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003ebf 	.word	0x08003ebf
 8003e94:	08003edd 	.word	0x08003edd
 8003e98:	08003edd 	.word	0x08003edd
 8003e9c:	08003edd 	.word	0x08003edd
 8003ea0:	08003ec9 	.word	0x08003ec9
 8003ea4:	08003edd 	.word	0x08003edd
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003edd 	.word	0x08003edd
 8003eb0:	08003ed3 	.word	0x08003ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	60fb      	str	r3, [r7, #12]

      break;
 8003ebc:	e00f      	b.n	8003ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	60fb      	str	r3, [r7, #12]

      break;
 8003ec6:	e00a      	b.n	8003ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	60fb      	str	r3, [r7, #12]

      break;
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	60fb      	str	r3, [r7, #12]

      break;
 8003eda:	e000      	b.n	8003ede <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003edc:	bf00      	nop
  }

  return tmpreg;
 8003ede:	68fb      	ldr	r3, [r7, #12]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a40      	ldr	r2, [pc, #256]	; (8004064 <TIM_Base_SetConfig+0x114>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6e:	d00f      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a3d      	ldr	r2, [pc, #244]	; (8004068 <TIM_Base_SetConfig+0x118>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3c      	ldr	r2, [pc, #240]	; (800406c <TIM_Base_SetConfig+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a3b      	ldr	r2, [pc, #236]	; (8004070 <TIM_Base_SetConfig+0x120>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a3a      	ldr	r2, [pc, #232]	; (8004074 <TIM_Base_SetConfig+0x124>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2f      	ldr	r2, [pc, #188]	; (8004064 <TIM_Base_SetConfig+0x114>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d02b      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d027      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <TIM_Base_SetConfig+0x118>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d023      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	; (800406c <TIM_Base_SetConfig+0x11c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01f      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <TIM_Base_SetConfig+0x120>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01b      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a29      	ldr	r2, [pc, #164]	; (8004074 <TIM_Base_SetConfig+0x124>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d017      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a28      	ldr	r2, [pc, #160]	; (8004078 <TIM_Base_SetConfig+0x128>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a27      	ldr	r2, [pc, #156]	; (800407c <TIM_Base_SetConfig+0x12c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00f      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <TIM_Base_SetConfig+0x130>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a25      	ldr	r2, [pc, #148]	; (8004084 <TIM_Base_SetConfig+0x134>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a24      	ldr	r2, [pc, #144]	; (8004088 <TIM_Base_SetConfig+0x138>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a23      	ldr	r2, [pc, #140]	; (800408c <TIM_Base_SetConfig+0x13c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <TIM_Base_SetConfig+0x114>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_Base_SetConfig+0xf8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a0c      	ldr	r2, [pc, #48]	; (8004074 <TIM_Base_SetConfig+0x124>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	615a      	str	r2, [r3, #20]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40010000 	.word	0x40010000
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00
 8004074:	40010400 	.word	0x40010400
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800
 8004084:	40001800 	.word	0x40001800
 8004088:	40001c00 	.word	0x40001c00
 800408c:	40002000 	.word	0x40002000

08004090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f023 0201 	bic.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0303 	bic.w	r3, r3, #3
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f023 0302 	bic.w	r3, r3, #2
 80040d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a20      	ldr	r2, [pc, #128]	; (8004168 <TIM_OC1_SetConfig+0xd8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_OC1_SetConfig+0x64>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1f      	ldr	r2, [pc, #124]	; (800416c <TIM_OC1_SetConfig+0xdc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10c      	bne.n	800410e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0308 	bic.w	r3, r3, #8
 80040fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <TIM_OC1_SetConfig+0xd8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <TIM_OC1_SetConfig+0x8e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a14      	ldr	r2, [pc, #80]	; (800416c <TIM_OC1_SetConfig+0xdc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d111      	bne.n	8004142 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800412c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	621a      	str	r2, [r3, #32]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40010000 	.word	0x40010000
 800416c:	40010400 	.word	0x40010400

08004170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0320 	bic.w	r3, r3, #32
 80041ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a22      	ldr	r2, [pc, #136]	; (8004254 <TIM_OC2_SetConfig+0xe4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_OC2_SetConfig+0x68>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a21      	ldr	r2, [pc, #132]	; (8004258 <TIM_OC2_SetConfig+0xe8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d10d      	bne.n	80041f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a17      	ldr	r2, [pc, #92]	; (8004254 <TIM_OC2_SetConfig+0xe4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_OC2_SetConfig+0x94>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a16      	ldr	r2, [pc, #88]	; (8004258 <TIM_OC2_SetConfig+0xe8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d113      	bne.n	800422c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800420a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40010400 	.word	0x40010400

0800425c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a21      	ldr	r2, [pc, #132]	; (800433c <TIM_OC3_SetConfig+0xe0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_OC3_SetConfig+0x66>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a20      	ldr	r2, [pc, #128]	; (8004340 <TIM_OC3_SetConfig+0xe4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10d      	bne.n	80042de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <TIM_OC3_SetConfig+0xe0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <TIM_OC3_SetConfig+0x92>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a15      	ldr	r2, [pc, #84]	; (8004340 <TIM_OC3_SetConfig+0xe4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d113      	bne.n	8004316 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40010000 	.word	0x40010000
 8004340:	40010400 	.word	0x40010400

08004344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800438e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	031b      	lsls	r3, r3, #12
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a12      	ldr	r2, [pc, #72]	; (80043e8 <TIM_OC4_SetConfig+0xa4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_OC4_SetConfig+0x68>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a11      	ldr	r2, [pc, #68]	; (80043ec <TIM_OC4_SetConfig+0xa8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d109      	bne.n	80043c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	019b      	lsls	r3, r3, #6
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40010400 	.word	0x40010400

080043f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f023 0201 	bic.w	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a28      	ldr	r2, [pc, #160]	; (80044bc <TIM_TI1_SetConfig+0xcc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01b      	beq.n	8004456 <TIM_TI1_SetConfig+0x66>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d017      	beq.n	8004456 <TIM_TI1_SetConfig+0x66>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <TIM_TI1_SetConfig+0xd0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <TIM_TI1_SetConfig+0x66>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <TIM_TI1_SetConfig+0xd4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00f      	beq.n	8004456 <TIM_TI1_SetConfig+0x66>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <TIM_TI1_SetConfig+0xd8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00b      	beq.n	8004456 <TIM_TI1_SetConfig+0x66>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <TIM_TI1_SetConfig+0xdc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <TIM_TI1_SetConfig+0x66>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <TIM_TI1_SetConfig+0xe0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_TI1_SetConfig+0x66>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4a20      	ldr	r2, [pc, #128]	; (80044d4 <TIM_TI1_SetConfig+0xe4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <TIM_TI1_SetConfig+0x6a>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <TIM_TI1_SetConfig+0x6c>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0303 	bic.w	r3, r3, #3
 8004466:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e003      	b.n	800447a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	b2db      	uxtb	r3, r3
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f023 030a 	bic.w	r3, r3, #10
 8004494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f003 030a 	and.w	r3, r3, #10
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40010400 	.word	0x40010400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40001800 	.word	0x40001800

080044d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f023 0201 	bic.w	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 030a 	bic.w	r3, r3, #10
 8004514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004536:	b480      	push	{r7}
 8004538:	b087      	sub	sp, #28
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f023 0210 	bic.w	r2, r3, #16
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004562:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	031b      	lsls	r3, r3, #12
 800457a:	b29b      	uxth	r3, r3
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004588:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	621a      	str	r2, [r3, #32]
}
 80045a4:	bf00      	nop
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f023 0210 	bic.w	r2, r3, #16
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	031b      	lsls	r3, r3, #12
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	621a      	str	r2, [r3, #32]
}
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 0303 	bic.w	r3, r3, #3
 800463c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800464c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	b2db      	uxtb	r3, r3
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004660:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	621a      	str	r2, [r3, #32]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	031b      	lsls	r3, r3, #12
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80046da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	031b      	lsls	r3, r3, #12
 80046e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	f043 0307 	orr.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	431a      	orrs	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4313      	orrs	r3, r2
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2201      	movs	r2, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	43db      	mvns	r3, r3
 800479a:	401a      	ands	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e032      	b.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004812:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	4313      	orrs	r3, r2
 800481c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e03f      	b.n	8004906 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd f99a 	bl	8001bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2224      	movs	r2, #36	; 0x24
 80048a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f829 	bl	8004910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004910:	b5b0      	push	{r4, r5, r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004950:	f023 030c 	bic.w	r3, r3, #12
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	430b      	orrs	r3, r1
 800495c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699a      	ldr	r2, [r3, #24]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497c:	f040 80e4 	bne.w	8004b48 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4aab      	ldr	r2, [pc, #684]	; (8004c34 <UART_SetConfig+0x324>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <UART_SetConfig+0x84>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4aaa      	ldr	r2, [pc, #680]	; (8004c38 <UART_SetConfig+0x328>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d16c      	bne.n	8004a6e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004994:	f7fe fa7a 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 8004998:	4602      	mov	r2, r0
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009a      	lsls	r2, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	4aa3      	ldr	r2, [pc, #652]	; (8004c3c <UART_SetConfig+0x32c>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	011c      	lsls	r4, r3, #4
 80049b8:	f7fe fa68 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 80049bc:	4602      	mov	r2, r0
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009a      	lsls	r2, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80049d2:	f7fe fa5b 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	4a93      	ldr	r2, [pc, #588]	; (8004c3c <UART_SetConfig+0x32c>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2264      	movs	r2, #100	; 0x64
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	1aeb      	subs	r3, r5, r3
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	3332      	adds	r3, #50	; 0x32
 8004a00:	4a8e      	ldr	r2, [pc, #568]	; (8004c3c <UART_SetConfig+0x32c>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a0e:	441c      	add	r4, r3
 8004a10:	f7fe fa3c 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009a      	lsls	r2, r3, #2
 8004a1e:	441a      	add	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a2a:	f7fe fa2f 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009a      	lsls	r2, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	4a7d      	ldr	r2, [pc, #500]	; (8004c3c <UART_SetConfig+0x32c>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2264      	movs	r2, #100	; 0x64
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	1aeb      	subs	r3, r5, r3
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	3332      	adds	r3, #50	; 0x32
 8004a58:	4a78      	ldr	r2, [pc, #480]	; (8004c3c <UART_SetConfig+0x32c>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	f003 0207 	and.w	r2, r3, #7
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4422      	add	r2, r4
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	e154      	b.n	8004d18 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004a6e:	f7fe f9f9 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004a72:	4602      	mov	r2, r0
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009a      	lsls	r2, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	4a6c      	ldr	r2, [pc, #432]	; (8004c3c <UART_SetConfig+0x32c>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	011c      	lsls	r4, r3, #4
 8004a92:	f7fe f9e7 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009a      	lsls	r2, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	fbb2 f5f3 	udiv	r5, r2, r3
 8004aac:	f7fe f9da 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009a      	lsls	r2, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	4a5d      	ldr	r2, [pc, #372]	; (8004c3c <UART_SetConfig+0x32c>)
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	2264      	movs	r2, #100	; 0x64
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	1aeb      	subs	r3, r5, r3
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	3332      	adds	r3, #50	; 0x32
 8004ada:	4a58      	ldr	r2, [pc, #352]	; (8004c3c <UART_SetConfig+0x32c>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae8:	441c      	add	r4, r3
 8004aea:	f7fe f9bb 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009a      	lsls	r2, r3, #2
 8004af8:	441a      	add	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b04:	f7fe f9ae 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009a      	lsls	r2, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	4a47      	ldr	r2, [pc, #284]	; (8004c3c <UART_SetConfig+0x32c>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2264      	movs	r2, #100	; 0x64
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	1aeb      	subs	r3, r5, r3
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	3332      	adds	r3, #50	; 0x32
 8004b32:	4a42      	ldr	r2, [pc, #264]	; (8004c3c <UART_SetConfig+0x32c>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f003 0207 	and.w	r2, r3, #7
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4422      	add	r2, r4
 8004b44:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004b46:	e0e7      	b.n	8004d18 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a39      	ldr	r2, [pc, #228]	; (8004c34 <UART_SetConfig+0x324>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <UART_SetConfig+0x24c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a38      	ldr	r2, [pc, #224]	; (8004c38 <UART_SetConfig+0x328>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d171      	bne.n	8004c40 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004b5c:	f7fe f996 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	009a      	lsls	r2, r3, #2
 8004b6a:	441a      	add	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	4a31      	ldr	r2, [pc, #196]	; (8004c3c <UART_SetConfig+0x32c>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	011c      	lsls	r4, r3, #4
 8004b80:	f7fe f984 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009a      	lsls	r2, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b9a:	f7fe f977 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009a      	lsls	r2, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <UART_SetConfig+0x32c>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2264      	movs	r2, #100	; 0x64
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	1aeb      	subs	r3, r5, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	3332      	adds	r3, #50	; 0x32
 8004bc8:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <UART_SetConfig+0x32c>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd4:	441c      	add	r4, r3
 8004bd6:	f7fe f959 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009a      	lsls	r2, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bf0:	f7fe f94c 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009a      	lsls	r2, r3, #2
 8004bfe:	441a      	add	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	4a0c      	ldr	r2, [pc, #48]	; (8004c3c <UART_SetConfig+0x32c>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	2264      	movs	r2, #100	; 0x64
 8004c14:	fb02 f303 	mul.w	r3, r2, r3
 8004c18:	1aeb      	subs	r3, r5, r3
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	3332      	adds	r3, #50	; 0x32
 8004c1e:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <UART_SetConfig+0x32c>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4422      	add	r2, r4
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	e071      	b.n	8004d18 <UART_SetConfig+0x408>
 8004c34:	40011000 	.word	0x40011000
 8004c38:	40011400 	.word	0x40011400
 8004c3c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004c40:	f7fe f910 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009a      	lsls	r2, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	4a31      	ldr	r2, [pc, #196]	; (8004d20 <UART_SetConfig+0x410>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	011c      	lsls	r4, r3, #4
 8004c64:	f7fe f8fe 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	009a      	lsls	r2, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c7e:	f7fe f8f1 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009a      	lsls	r2, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	4a21      	ldr	r2, [pc, #132]	; (8004d20 <UART_SetConfig+0x410>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	2264      	movs	r2, #100	; 0x64
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	1aeb      	subs	r3, r5, r3
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	3332      	adds	r3, #50	; 0x32
 8004cac:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <UART_SetConfig+0x410>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb8:	441c      	add	r4, r3
 8004cba:	f7fe f8d3 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009a      	lsls	r2, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fbb2 f5f3 	udiv	r5, r2, r3
 8004cd4:	f7fe f8c6 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009a      	lsls	r2, r3, #2
 8004ce2:	441a      	add	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <UART_SetConfig+0x410>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2264      	movs	r2, #100	; 0x64
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	1aeb      	subs	r3, r5, r3
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a07      	ldr	r2, [pc, #28]	; (8004d20 <UART_SetConfig+0x410>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 020f 	and.w	r2, r3, #15
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4422      	add	r2, r4
 8004d14:	609a      	str	r2, [r3, #8]
}
 8004d16:	e7ff      	b.n	8004d18 <UART_SetConfig+0x408>
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d20:	51eb851f 	.word	0x51eb851f

08004d24 <__libc_init_array>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	4e0d      	ldr	r6, [pc, #52]	; (8004d5c <__libc_init_array+0x38>)
 8004d28:	4c0d      	ldr	r4, [pc, #52]	; (8004d60 <__libc_init_array+0x3c>)
 8004d2a:	1ba4      	subs	r4, r4, r6
 8004d2c:	10a4      	asrs	r4, r4, #2
 8004d2e:	2500      	movs	r5, #0
 8004d30:	42a5      	cmp	r5, r4
 8004d32:	d109      	bne.n	8004d48 <__libc_init_array+0x24>
 8004d34:	4e0b      	ldr	r6, [pc, #44]	; (8004d64 <__libc_init_array+0x40>)
 8004d36:	4c0c      	ldr	r4, [pc, #48]	; (8004d68 <__libc_init_array+0x44>)
 8004d38:	f000 f86a 	bl	8004e10 <_init>
 8004d3c:	1ba4      	subs	r4, r4, r6
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	2500      	movs	r5, #0
 8004d42:	42a5      	cmp	r5, r4
 8004d44:	d105      	bne.n	8004d52 <__libc_init_array+0x2e>
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
 8004d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d4c:	4798      	blx	r3
 8004d4e:	3501      	adds	r5, #1
 8004d50:	e7ee      	b.n	8004d30 <__libc_init_array+0xc>
 8004d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d56:	4798      	blx	r3
 8004d58:	3501      	adds	r5, #1
 8004d5a:	e7f2      	b.n	8004d42 <__libc_init_array+0x1e>
 8004d5c:	080050c8 	.word	0x080050c8
 8004d60:	080050c8 	.word	0x080050c8
 8004d64:	080050c8 	.word	0x080050c8
 8004d68:	080050cc 	.word	0x080050cc

08004d6c <memset>:
 8004d6c:	4402      	add	r2, r0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <round>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	ec57 6b10 	vmov	r6, r7, d0
 8004d82:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8004d86:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8004d8a:	2c13      	cmp	r4, #19
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	463d      	mov	r5, r7
 8004d90:	dc17      	bgt.n	8004dc2 <round+0x46>
 8004d92:	2c00      	cmp	r4, #0
 8004d94:	da09      	bge.n	8004daa <round+0x2e>
 8004d96:	3401      	adds	r4, #1
 8004d98:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8004d9c:	d103      	bne.n	8004da6 <round+0x2a>
 8004d9e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004da2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004da6:	2100      	movs	r1, #0
 8004da8:	e02c      	b.n	8004e04 <round+0x88>
 8004daa:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <round+0x90>)
 8004dac:	4122      	asrs	r2, r4
 8004dae:	4217      	tst	r7, r2
 8004db0:	d100      	bne.n	8004db4 <round+0x38>
 8004db2:	b19e      	cbz	r6, 8004ddc <round+0x60>
 8004db4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004db8:	4123      	asrs	r3, r4
 8004dba:	442b      	add	r3, r5
 8004dbc:	ea23 0302 	bic.w	r3, r3, r2
 8004dc0:	e7f1      	b.n	8004da6 <round+0x2a>
 8004dc2:	2c33      	cmp	r4, #51	; 0x33
 8004dc4:	dd0d      	ble.n	8004de2 <round+0x66>
 8004dc6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004dca:	d107      	bne.n	8004ddc <round+0x60>
 8004dcc:	4630      	mov	r0, r6
 8004dce:	4639      	mov	r1, r7
 8004dd0:	ee10 2a10 	vmov	r2, s0
 8004dd4:	f7fb fa1c 	bl	8000210 <__adddf3>
 8004dd8:	4606      	mov	r6, r0
 8004dda:	460f      	mov	r7, r1
 8004ddc:	ec47 6b10 	vmov	d0, r6, r7
 8004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dea:	40d0      	lsrs	r0, r2
 8004dec:	4206      	tst	r6, r0
 8004dee:	d0f5      	beq.n	8004ddc <round+0x60>
 8004df0:	2201      	movs	r2, #1
 8004df2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004df6:	fa02 f404 	lsl.w	r4, r2, r4
 8004dfa:	1931      	adds	r1, r6, r4
 8004dfc:	bf28      	it	cs
 8004dfe:	189b      	addcs	r3, r3, r2
 8004e00:	ea21 0100 	bic.w	r1, r1, r0
 8004e04:	461f      	mov	r7, r3
 8004e06:	460e      	mov	r6, r1
 8004e08:	e7e8      	b.n	8004ddc <round+0x60>
 8004e0a:	bf00      	nop
 8004e0c:	000fffff 	.word	0x000fffff

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
